<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随笔</title>
      <link href="/2023/11/23/sui-bi/"/>
      <url>/2023/11/23/sui-bi/</url>
      
        <content type="html"><![CDATA[<p>我的家庭，一直是我心中最大的伤痛。近日的一些事情，又一次刺痛了我敏感的神经。曾经，我在绝望中唯一的期盼就是赶快开学，远离这个家。而如今在异国他乡，家庭给我带来的不可磨灭的伤痛仍一次又一次地刺痛着我。今天郁闷又到了顶点，一整天瘫在床上，不吃不喝，正如几个月前我的状况一模一样。深夜以至，我遂决定不吐不快，倒上一杯酒，记录一下一个糟糕的家庭、一个令人绝望的“父亲”是如何摧毁一个人对生的意志。</p><p>一个父亲本应该是家里的支柱和楷模，但可悲的是，我渐渐地认清，我的“父亲”却成为了我最大的反面教材。冷漠、没有责任心、自私、自大、吝啬、言而无信、优柔寡断，这些缺点，都可怕地集于一个父亲的身上，展现得淋漓尽致。我生命中的伤痛，从人格、生活到学业，几乎都和他有着千丝万缕的联系。</p><p>我对幼小时期的回忆充斥着父母嘶吼打斗的场景。那时的我不懂原因，只能一个人害怕地蜷缩在一边。妈妈总是告诉我，爸爸给不到她她需要的爱和关心，大抵在我幼儿园的时期，妈妈也转而向宗教寻求慰藉。而我的回忆里，其他很多人告诉我，是妈妈的心智不够成熟，也控制不好情绪。在众多人的言论下，我以为确实是妈妈的问题，但在此后十几年的成长经历中，我终于认识到我的“父亲”的冷漠无情，并不是一般人可承受的。</p><p>我的成长过程中，大部分时间是和妈妈生活或住校，跟他接触并不算多。懂事后唯一相处时间长的时候，是疫情在家和去年申请学校在家的时间。而去年这一年和他的相处中，我无数次因为他的冷漠而情绪崩溃，在离家前的最后几个月里甚至愤而离家出走，以及再次陷入抑郁。在一次次的自我质疑中，我渐渐地明确了，他生下我并不是因为他爱我，而是为了完成“传宗接代”的任务。而生养我长大，也只是希望控制我的人生，把我留在身边，过他规划好的人生。我的学业生涯的数个关键节点上，我都得不到家庭应该给到的支持，无论是经济支持还是决策、精神支持，而更多时候得到的是倍增的阻力和错误的引导。几个月前的一次剧烈冲突后，我又一次质问他，而他的回答给了我莫大的冲击：我没有想到你能爬到这么高。那一瞬间，我的耳边仿佛有一阵轰鸣。和我相处过的人都知道，我是个完美主义，也对自己的要求很高。我从来不想成为池中物，而我身边那么近的人，在相处二十多年后仍认为我只该成为一个普通人。我之前从来没有想到，我的“父亲”一直以来是在用如此自私的眼光看待我，也终于明白，他并不会无条件支持我过我想过的人生，在他眼里我就应该成为一个最普通的人，过平凡的日子，在他身边赡养他到老。而我走得越高，越脱离他的掌控，对他来说就越是一种威胁。所以，他自然会一再扮演我成长路上的阻碍。</p><p>我家的氛围总是很清冷。在家中，他是一个只关注自己生活，不关注他人需要的人。我在家时，每天可能和他说不上十句话，他也从来不会关心我学习累不累。我一直是一个体谅他人的人，我总是把他定义成不善言谈。但相处多了，我逐渐明白，他只是只关心自己的生活，也不曾觉得我辛苦，反而将我一个个在家情绪崩溃躺在床上的日夜当作偷懒休息的表现。我清楚地记得，离家出走后抑郁期间，我在一次短信中怒骂，他根本不配做父亲。他理直气壮地说：“我把我儿子培养成本科生、博士生，现在又出国留学，我有什么不配？”我看到后一阵颤抖。一直以来，我一直是自己在学业的道路上苦苦打拼。我没有要求过，也没有得到过过多的物质和精神支持。我几乎一直都是一个人在负重前行，甚至是在背负家庭赋予的重压前行，而他却轻描淡写地将所有的功劳归于自己。这种厚颜无耻实在令我怒发冲冠，又汗毛直竖。</p><p>经济上，他的吝啬也一再让我心寒。我的父母都有着体面的工作，但身为一个计算机专业的学生，我每次假期回家后，没有一次家里是有网络接入的，因为他们想省下网费。甚至在疫情学期，他们告诉我用手机热点上课。大学时，有一次他看到了我得了奖学金，就几个月没有给我打生活费。我一直在尽力地理解他们，委屈自己，但迎来的只是他变本加厉的克扣。在我临走前几个月，他甚至为了我想换掉用了五年的笔记本电脑而发脾气，而在此之前，我刚刚决定了为了节省大笔的钱而放弃昂贵的美国选择欧陆。而这件“小事”，也点燃了我积压情绪的导火索，让我毅然离家出走。从那一刻开始我终于认识到，我一直以来对他的理解，某种程度上只会成为对他的纵容，让他在自私、吝啬的路上越走越远。</p><p>离家出走后的一两个月，他从来没有担心过我在过着什么样的生活，也不曾给我任何经济支持。后来他说他默认我去到外地找了实习，有着收入。我不知道是什么让他如此自信地做出了这样的假设。在我独自漂泊、精神严重内耗、情绪支离破碎的时刻，又怎么可能有精力再去找实习、养活自己。他凭什么觉得我一直可以那么强大？凭什么在我极度愤怒、破门而出之后在家泰然自若？这是何等的冷漠？</p><p>再后来，给我造成最大的伤害的事情发生了。有一天，他们发短信告诉我可以回邢台家住，家里没人且他们不会回去打扰我。因为我身上的钱不足够支持一直在外居住，所以我回到了家里。谁知一段时间后，他们开始在屋外徘徊，甚至没日没夜地在楼道里蹲伏我出门。我在家里无法出门，也没有食物。经历了两天没有食物后，那天深夜，当我终于决定再次搬走，谁知出门后他们正在楼道里堵我。我尝试使劲地挣脱他们，但他们敲门叫来了解放邻居，所有人一同控制着我让我无法离开。后面人越来越多，所有人一同把我控制在屋内，我也只能在那里和他们僵持。天亮后，令我终身难忘的恐怖时刻来临。我的妈妈从医院（可能是人民医院）叫来了数个壮汉，让他们把我送到医院打镇定剂和营养。那些人有的强硬地控制住我，用肘部勒住我的脖子让我无法动弹，有些人熟练地拿布条绑住我的手脚。我声嘶力竭地哭喊，极力挣扎，喊着我没事，我不需要去医院，但无济于事，没人理会。面对意料之外的暴力，我的妈妈在旁边一边看一边哭，我的“父亲”在旁边目瞪口呆，邻居也站在一旁。当非法行为正在发生在我身上时，没有任何一个人制止他们，没有一个人试图收集暴行的证据。所有人只是默默地看着我像一个木偶一样被他们支配着，看着我的尊严在众目睽睽之下被践踏。他们两个人，从来没有想过我在经受着怎样非人的折磨，他们也根本不曾想站出来保护我一丝一毫，他们只想保证我的身体活着，按他们所想的方式活着，但我的心在那一刻已经彻底死去了。</p><p>那一天，已经离我出国的日子很近了。出走时，我的签证还没有办，他也从未曾想过如果我没有钱，耽误了办签证会是什么后果，我半年多日夜的准备付诸东流会多么崩溃。多亏有贵人相助，我才有钱开出资金证明。若是没有这位贵人，我恐怕早已无法来上学，仍在国内受他们的煎熬。从医院事件发生一直到出国那天，我一直陷在严重的抑郁、焦虑情绪中，每天无法做任何事情，只是把自己关在屋子里，不吃不喝，整夜不眠。临走前几天，为了保证自己到了国外能支撑着料理生活和学习，我又一次怀着痛彻心扉的心情，去医院开了抗抑郁的药物。去机场的那天，我匆匆忙忙地收拾着行李，心如死灰。他一声一声地道歉，但已经什么也改变不了了。直到坐上飞机，我的精神也还在恍惚。我不知我将何去何从，不知我还有没有努力生活的勇气。</p><p>我是一个缺乏安全感的人，而从小到大，本应给我力量感的他，却从来没有为我出过头。每当我受到不公平的待遇，他告诉我的只有容忍，只有他们也无能为力。高中最昏暗的时候，我曾遭到学校的退学压力，遭到各科老师无端的的排挤、谩骂，默默承受成绩几百几百名下滑的黑暗时刻，我从家中得到的答复也只有忍耐。所以我从未觉得家是一个温暖的港湾，是一个可以给我依靠、给我力量的地方，我只觉得一直是一个人在漂泊流浪。</p><p>如今，我已和他们不再有任何联系。昨天，我从那位贵人那里得知，我的“父亲”又表达了对那位贵人帮助我的不满，将其称为对我的“娇惯”。那位贵人只是想让我能好好的活着，而我的“父亲”却一直在用他的言行一刀一刀地剐我的身心。回想起临走前他“愧疚”的模样，我不禁感慨人本性难移，恶人的恶根性是不会因目睹他人的苦痛而改变的。他曾经将我的母亲对生活的向往亲手摧毁，如今又让他口中的儿子背负上深重的伤痛，他却仍好大喜功，宣称这个家是靠他的努力而维系着。我不知道这种恩断义绝的情况下，他还会不会给我经济支持，让我能完成学业。我知道我将继续带着对未来的迷茫和恐慌，在异国他乡打拼，但我也庆幸及时认清了他的面目，让我不会再对他寄予一丝一毫的期望。写到这里已是凌晨三点多，就像无数个难眠的日子一样，笔下也无逻辑可言，只剩下情绪的无脑倾泻。难得父子一场，我祝他继续活在自己的世界里，孤独终老。</p><p><img src="/Users/hrluo/Projects/blog/source/_posts/medicine.jpeg" alt="medicine"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning Specialization 学习笔记</title>
      <link href="/2023/02/22/deep-learning-specialization-xue-xi-bi-ji/"/>
      <url>/2023/02/22/deep-learning-specialization-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Neural-Networks-and-Deep-Learning"><a href="#Neural-Networks-and-Deep-Learning" class="headerlink" title="Neural Networks and Deep Learning"></a>Neural Networks and Deep Learning</h1><h2 id="Introduction-to-Deep-Learning"><a href="#Introduction-to-Deep-Learning" class="headerlink" title="Introduction to Deep Learning"></a>Introduction to Deep Learning</h2><ul><li>On small scale datasets, models’ performance rely more on hand engineered features and lower level details, so an SVM may outperform a neural network; but for a large amount of data, large models are often dominating.</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Variational Autoencoders</title>
      <link href="/2022/05/25/variational-autoencoders/"/>
      <url>/2022/05/25/variational-autoencoders/</url>
      
        <content type="html"><![CDATA[<p>​        变分自编码器（VAEs），和GAN一样是一种生成模型，下图是其生成的人脸图像，它是一个自编码器的regularised版本。自编码器不能用于生成，而VAE可以。</p><p><img src="Variational-Autoencoders.assets/1BaZPg3SRgZGVigguQCmirA.png" alt="img"></p><ul><li><p>dimensionality reduction：通过selection（选取现有特征）或extraction（产生新特征）的方法降维；</p></li><li><p>encoder：从旧特征表示中生成新特征表示，从将数据从initial space压缩到encoded space/ latent space，可能有信息损失；</p></li><li><p>decoder：encoder的逆过程；</p><p><img src="Variational-Autoencoders.assets/1UdOybs9wOe3zW8vDAfj9VA@2x.png" alt="img"></p><p>​    我们的目标是找到一对encoder和decoder，让d(e(x))与x之间的损失尽可能小。</p></li><li><p>作为基础的降维方法，PCA通过线性组合旧特征的方式寻找新特征，让旧特征点在新特征定义的子空间上的投影尽可能接近原始旧特征点（euclidean distance）；</p></li></ul><p><img src="Variational-Autoencoders.assets/1ayo0n2zq_gy7VERYmp4lrA@2x.png" alt="img"></p><ul><li>autoencoder以神经网络的方式寻找encoder和decoder对。</li></ul><p><img src="Variational-Autoencoders.assets/1bY_ShNK6lBCQ3D9LYIfwJg@2x.png" alt="img"></p><ul><li>如果encoder和decoder各为一个linear layer without non-linearity，则它与PCA非常相似，可以拟合到最优子空间中的一个（有多个basis都可以达到相同的最优空间）。不同之处在于，autoencoder学到的特征可能不是相互独立的，没有正交的限制。在下图中表现为，autoencoder的基表示的平面和PCA相同，但基不正交。</li></ul><p><img src="Variational-Autoencoders.assets/1ek9ZFmimq9Sr1sG5Z0jXfQ@2x.png" alt="img"></p><ul><li>当使用深度神经网络时，encoder具有更强的表示能力，可以将数据维度降至更低。理想情况下，甚至可以降为一维，甚至将N个初始点编码为1，2，3…N，decoder也能无损地完成相应解码工作。</li><li>但是，这种理想的降维通常伴随着不可解释和难以探索的代价，且降维的最终目的通常是在降维的同时在降维后的表示中保持数据结构信息的主要部分。因此我们要根据我们降维的目的，控制好结果的维度和网络的深度。</li></ul><p><img src="Variational-Autoencoders.assets/1F-3zbCL_lp7EclKowfowMA@2x.png" alt="img"></p><ul><li>VAE的最初想法：如果latent space是足够regular的，我们就可以从其中随意取一点，并解码为一个新的数据，此时decoder就表现得GAN中的generator。但这个空间的regular程度取决于initial space，dimension of latent space和网络架构，因此很难确定。</li></ul><p><img src="Variational-Autoencoders.assets/1Qd1xKV9o-AnWtfIDhhNdFg@2x.png" alt="img"></p><ul><li>且上文中理想的encoder-decoder（降维至实轴）会带来严重过拟合，导致实轴上的点解码后可能是无意义的；</li></ul><p><img src="Variational-Autoencoders.assets/1iSfaVxcGi_ELkKgAG0YRlQ@2x.png" alt="img"></p><ul><li>通常，autoencoder的训练目标只是让loss越小越好，不关心latent space是否是organized，容易过拟合，因此我们要对它做显式的正则化。</li></ul><ul><li>因此，VAE就是将autoencoder正则化，以避免过拟合，以及保证latent space具有好的性质，可用于生成过程。</li><li>其改变在于，我们将输入编码为latent space中的一个distribution，而不是一个点。</li><li>VAE训练过程：<ul><li>输入被编码为latent space上的distribution；</li><li>从该distribution中采样一个点；</li><li>将该点解码，并计算reconstruction error；</li><li>反向传播reconstruction error；</li></ul></li><li><strong>疑问：正则化的是latent space而不是输入数据对应的distribution吗？</strong></li></ul><p><img src="Variational-Autoencoders.assets/1ejNnusxYrn1NRDZf4Kg2lw@2x.png" alt="img"></p><ul><li><p>编码的分布被选为正态分布，encoder可以被训练为返回描述这些正态分布的mean和covariance matrix。这可以很自然地表达latent space的正则化。</p></li><li><p>因此，VAE的损失函数包含一个reconstruction term和一个regularisation term（on the latent layer），让latent space接近标准正态分布。这个term就是KL散度。</p></li></ul><p><img src="Variational-Autoencoders.assets/1Q5dogodt3wzKKktE0v3dMQ@2x.png" alt="img"></p><h3 id="Intuitions-about-the-regularisation"><a href="#Intuitions-about-the-regularisation" class="headerlink" title="Intuitions about the regularisation"></a>Intuitions about the regularisation</h3><ul><li>这个regularity需要有两个特性：<ul><li>continuity：相近的两个点解码后不应给出两个完全不同的结果；</li><li>completeness：对一个选定的distribution，从latent space中采样的点应该在解码后给出有意义的结果；</li></ul></li><li>如果没有精心设计的regularization term，学习到的分布可能具有很小的方差或很不同的均值，不能满足上述特性。因此我们要同时对返回的covariance matrix和mean做正则化，使covariance matrices接近单位矩阵，让mean接近0。</li></ul><p><img src="Variational-Autoencoders.assets/19ouOKh2w-b3NNOVx4Mw9bg@2x-165345828700612.png" alt="img"></p><ul><li><p>通过防止模型将数据编码得相互远离，以及鼓励返回的分布尽可能重合，来满足continuity和completeness。</p></li><li><p>综上，如果在latent space中采样一个位于两个由不同训练数据产生的不同编码分布之间的点，其解码结果应该也介于两个分布对应的训练数据之间。</p></li></ul><p><img src="Variational-Autoencoders.assets/179AzftDm7WcQ9OfRH5Y-6g@2x.png" alt="img"></p><p>存疑：VAE是学习到一个distribution，但目前仍不太搞得懂latent space和distribution之间的关系，以及正则的到底是latent space还是distribution。</p><p>应该是对每一个数据样本都学习到它的一个distribution，即一个mean和一个covariance matrix。</p><p>它叫做VAE是因为它使用了叫做variational inference的statistical technique。</p><p>相较于GAN，VAE的原理基础更复杂（probabilistic model and variational inference），这是其近期发展不如GAN的部分原因。</p><p>参考资料：</p><p><a href="https://towardsdatascience.com/understanding-variational-autoencoders-vaes-f70510919f73">Understanding Variational Autoencoders (VAEs) | by Joseph Rocca | Towards Data Science</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Word使用技巧</title>
      <link href="/2022/04/15/word-shi-yong-ji-qiao/"/>
      <url>/2022/04/15/word-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="参考文献自动分词换行"><a href="#参考文献自动分词换行" class="headerlink" title="参考文献自动分词换行"></a>参考文献自动分词换行</h3><p>​        选中参考文献，点击“布局——断字——自动”，然后“两端对齐”。和“允许西文在单词中换行”无关。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows使用技巧</title>
      <link href="/2022/04/15/windows-shi-yong-ji-qiao/"/>
      <url>/2022/04/15/windows-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="让cmd命令可以在任何路径下执行"><a href="#让cmd命令可以在任何路径下执行" class="headerlink" title="让cmd命令可以在任何路径下执行"></a>让cmd命令可以在任何路径下执行</h2><p>​        将相关的exe和dll等文件放在C:\Windows\System32和C:\Windows\SysWOW64下即可，添加环境变量是不行的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPT使用技巧</title>
      <link href="/2022/04/09/ppt-shi-yong-ji-qiao/"/>
      <url>/2022/04/09/ppt-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<ul><li>调整字号快捷键：ctrl+[ 和 ctrl+]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习超参数作用</title>
      <link href="/2022/04/06/shen-du-xue-xi-chao-can-shu-zuo-yong/"/>
      <url>/2022/04/06/shen-du-xue-xi-chao-can-shu-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Weight-Decay"><a href="#Weight-Decay" class="headerlink" title="Weight Decay"></a>Weight Decay</h2><p>​        权重衰减是在模型的基础上添加L2 Loss时，L2 Loss前的系数。由于添加权重衰减wd后，权重衰减项wd*sum(W^2)对模型权重w的导数就变成了2*wd*w，相当于线性减小模型的权重，因此叫权重衰减。</p><p>​        权重衰减过大时，模型可能会一直无法训练好，而权重衰减过小时，训练时间会增长，合适的权重衰减可以减少模型训练时间并提高模型性能。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode调试路径问题</title>
      <link href="/2022/04/03/vscode-diao-shi-lu-jing-wen-ti/"/>
      <url>/2022/04/03/vscode-diao-shi-lu-jing-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在VSCode中调试时，默认当前路径为打开的项目根目录，而不是所运行文件的目录。修改步骤如下：</p><p>修改项目目录中的.vscode/launch.json，添加 <code> "cwd": "${fileDirname}",</code>一行，即</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>    <span class="token comment">// Hover to view descriptions of existing attributes.</span>    <span class="token comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Python: Current File"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${file}"</span><span class="token punctuation">,</span>            <span class="token property">"console"</span><span class="token operator">:</span> <span class="token string">"integratedTerminal"</span><span class="token punctuation">,</span>            <span class="token property">"justMyCode"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">//工作路径用打开的顶层目录，影响文件读写相对路径</span>            <span class="token comment">// "cwd": "${workspaceFolder}", </span>            <span class="token comment">//工作路径用当前文件所在目录，影响文件读写相对路径</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span><span class="token punctuation">,</span>            <span class="token comment">//sys.path 会加入顶层目录，影响模块导入查询路径</span>            <span class="token comment">//"env": { "PYTHONPATH": "${workspaceFolder}" }</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调试时，使用F5调试，而不是右上角的调试键即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python导入自己的模块</title>
      <link href="/2022/04/03/python-dao-ru-zi-ji-de-mo-kuai/"/>
      <url>/2022/04/03/python-dao-ru-zi-ji-de-mo-kuai/</url>
      
        <content type="html"><![CDATA[<p>​        Python中在import模块时，需要在sys.path中查找对应的模块，这个sys.path其实就是PYTHONPATH。因此，如果想导入自己的模块，就需要确保该模块处于当前的sys.path中。sys.path下的文件名和文件夹名可以作为模块导入，当导入文件夹名时，其实是导入的该文件夹下的__init__.py文件。sys.path下的文件夹也可作为包结构，用于组织模块（如from a.b.c import d)。虽然廖雪峰老师的教程说需要有__init__.py才能作为包，但经我自己试验好像不加也可以，好像python3都不需要了。</p><p>​        下面列举几种添加路径的方法：</p><ol><li>被运行代码的目录</li></ol><p>​        运行Python代码时，该代码所在的目录会被临时添加进sys.path。</p><ol start="2"><li>使用sys.path临时添加</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">r'此处填入绝对路径'</span><span class="token punctuation">)</span><span class="token comment"># sys.path.insert(0,os.getcwd()) # 或添加到最前方</span><span class="token comment"># BASE_DIR = Path(__file__).resolve().parent.parent.parent</span><span class="token comment"># sys.path.insert(0, str(BASE_DIR))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>pth文件</li></ol><p>​        将需要添加的路径写到一个pth文件中，并将文件放在</p><pre class="line-numbers language-none"><code class="language-none">python安装目录\Python38\Lib\site-packages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方法相当于将路径添加到PYTHONPATH中。</p><ol start="4"><li>命令行添加路径到PYTHONPATH</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set PYTHONPATH=E:/Project/Python/ModuleAndPackage/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>引用包的管理</li></ol><p>​        如果需要直接引用一个模块众多的包，则可以在其__init__.py中用绝对路径或相对路径import进来需要用到的模块、函数、类等，类似于向外部开放接口。相对路径中，.表示本级目录，..表示上级目录，示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># __init__.py</span><span class="token keyword">print</span> <span class="token string">"__init__"</span><span class="token keyword">from</span> <span class="token punctuation">.</span>a <span class="token keyword">import</span> b <span class="token keyword">as</span> ab<span class="token punctuation">,</span> c <span class="token keyword">as</span> ac <span class="token comment"># from a import b as ab, c as ac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>使用环境变量PYTHONPATH</li></ol><p>​        运行python代码时，使用如下命令将当前目录临时添加到PYTHONPATH：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PYTHONPATH=$(pwd)  python a/main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch学习笔记</title>
      <link href="/2022/03/23/pytorch-xue-xi-bi-ji/"/>
      <url>/2022/03/23/pytorch-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<ul><li></li></ul><h2 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a>tensor</h2><ul><li>索引 … 表示遍历该维度的所有行</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token operator">=</span>torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> ttensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.2214</span><span class="token punctuation">,</span> <span class="token number">0.1892</span><span class="token punctuation">,</span> <span class="token number">0.4655</span><span class="token punctuation">,</span> <span class="token number">0.8118</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.4638</span><span class="token punctuation">,</span> <span class="token number">0.0621</span><span class="token punctuation">,</span> <span class="token number">0.3499</span><span class="token punctuation">,</span> <span class="token number">0.2318</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.6071</span><span class="token punctuation">,</span> <span class="token number">0.6156</span><span class="token punctuation">,</span> <span class="token number">0.3000</span><span class="token punctuation">,</span> <span class="token number">0.6674</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8118</span><span class="token punctuation">,</span> <span class="token number">0.2318</span><span class="token punctuation">,</span> <span class="token number">0.6674</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 输出和上面一样</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8118</span><span class="token punctuation">,</span> <span class="token number">0.2318</span><span class="token punctuation">,</span> <span class="token number">0.6674</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算图、反向传播、禁用梯度追踪"><a href="#计算图、反向传播、禁用梯度追踪" class="headerlink" title="计算图、反向传播、禁用梯度追踪"></a>计算图、反向传播、禁用梯度追踪</h2><p>请参考PyTorch官方教程 <a href="https://pytorch.org/tutorials/beginner/basics/autogradqs_tutorial.html">Automatic Differentiation with torch.autograd — PyTorch Tutorials 1.11.0+cu102 documentation</a></p><h2 id="微调模型"><a href="#微调模型" class="headerlink" title="微调模型"></a>微调模型</h2><p><a href="https://pytorch.org/tutorials/beginner/finetuning_torchvision_models_tutorial.html">Finetuning Torchvision Models — PyTorch Tutorials 1.2.0 documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令汇总</title>
      <link href="/2022/03/23/linux-zhi-ling-hui-zong/"/>
      <url>/2022/03/23/linux-zhi-ling-hui-zong/</url>
      
        <content type="html"><![CDATA[<ul><li>kill某个用户所有进程</li></ul><pre class="line-numbers language-none"><code class="language-none">1.# pkill -u username2.# killall -u username3. ps列出ttlsa的pid，然后依次kill掉，比较繁琐.# ps -ef | grep ttlsa | awk '{ print $2 }' | sudo xargs kill -94. pgrep方式pgrep -u参数查出用户的所有pid，然后依次kill# pgrep -u ttlsa | sudo xargs kill -9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>kill某个用户的所有python进程</li></ul><pre class="line-numbers language-none"><code class="language-none"># killall -u username python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询某个用户所有进程</li></ul><pre class="line-numbers language-none"><code class="language-none"># top -u username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>xargs 用于将上个命令的输出作为该命令的输入，用法为</li></ul><pre class="line-numbers language-none"><code class="language-none"># somecommand |xargs -item command （-item的意义不清楚）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ssh远程登录</li></ul><pre class="line-numbers language-none"><code class="language-none"># ssh username@192.168.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看本级目录大小</li></ul><pre class="line-numbers language-none"><code class="language-none"># du -h --max-depth=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记y </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel使用技巧</title>
      <link href="/2022/03/22/excel-shi-yong-ji-qiao/"/>
      <url>/2022/03/22/excel-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>s</p><h3 id="连接表格"><a href="#连接表格" class="headerlink" title="连接表格"></a>连接表格</h3><p>根据某一列的内容连接两张表格</p><p>Sheet1：</p><p><img src="Excel%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220322105026.png" alt="微信截图_20220322105026"></p><p>Sheet2：</p><p><img src="Excel%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220322105313.png" alt="微信截图_20220322105313"></p><p>公式：在Sheet1的C2键入公式</p><pre class="line-numbers language-none"><code class="language-none">=VLOOKUP(A2,Sheet2!$A$2:$B$17,2,FALSE)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>A2</code>是被lookup的值，<code>Sheet2!$A$2:$B$17</code>是查找范围（绝对位置），<code>2</code>是待拼接的列，<code>FALSE</code>表示非近似匹配（即精确匹配）。</p><p>连接结果如下：</p><p><img src="Excel%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7.assets/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220322105917.png" alt="微信截图_20220322105917"></p>]]></content>
      
      
      <categories>
          
          <category> Office </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用python操作excel文件</title>
      <link href="/2022/03/22/shi-yong-python-cao-zuo-excel-wen-jian/"/>
      <url>/2022/03/22/shi-yong-python-cao-zuo-excel-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">write_xls</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> sheet_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment"># 获取需要写入数据的行数</span>    workbook <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 新建一个工作簿</span>    sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span>sheet_name<span class="token punctuation">)</span>  <span class="token comment"># 在工作簿中新建一个表格</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 像表格中写入数据（对应的行和列）</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token comment"># 保存工作簿</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"xls格式表格写入数据成功！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xlwt"><a href="#xlwt" class="headerlink" title="xlwt"></a>xlwt</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记</title>
      <link href="/2021/10/05/git-xue-xi-bi-ji/"/>
      <url>/2021/10/05/git-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><ul><li><p> <code>git add</code>，<code>git commit</code>，<code>git log</code>，<code>git status</code>；</p></li><li><p> <code>git diff</code>：查看尚未提交的修改；</p></li><li><p><code>git reset</code>：版本回退，回退时<code>HEAD</code>为当前版本，<code>HEAD^</code>为上一个版本，<code>HEAD^^</code>为上上个版本，<code>HEAD~100</code>为往上100个版本，命令格式如<code>git reset --hard HEAD^</code>，运行此命令后 log 中的当前版本信息就消失了；<code>HEAD^</code>可以替换为版本号或版本号的前几个字符；</p></li><li><p><code>git feflog</code>：查看历史命令信息，其中包括对应的版本号，可用于查找reset导致的log中消失的版本号；</p></li><li><p>Untracked files：指从未被<code>git add</code>过的新文件；</p></li><li><p>stage：暂存区；</p></li><li><p><code>git checkout -- readme.txt</code>：用版本库的readme.txt（上一次<code>git add</code>或<code>git commit</code>时的状态）替换工作区的版本，可用于撤销工作区的修改或删除操作等；</p></li><li><p><code>git reset HEAD &lt;file&gt;</code>：将暂存区的修改撤销，重新放回工作区，此后可以再用上一条的<code>git checkout -- &lt;file&gt;</code>撤销工作区的修改；</p></li><li><p><code>git rm test.txt</code>：从版本库中删除test.txt，若原文件已经被手动删除，此处也可用<code>git add test.txt</code>；</p></li></ul><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul><li>在 Github 创建远程仓库后，根据提示运行<code>git remote add origin git@server-name:path/repo-name.git</code>命令，就将本地仓库关联到了远程仓库，这里远程库采用默认名称origin，然后用<code>git push -u origin master</code>命令将本地库的master分支的内容推送到远程库master分支。master是git在<code>git init</code>时创建的默认分支名，可以替换为自己的分支名；-u参数还会把本地的master分支和远程的master分支关联起来，在以后的推送或拉取时可简化命令，直接用<code>git push origin master</code>推送；</li><li><code>git remote rm origin</code>：解除本地和远程的绑定关系；</li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul><li><code>git checkout -b dev</code>：创建并切换到dev分支，相当于<code>git branch dev</code>创建分支+<code>git checkout dev</code>切换分支；</li><li>新的创建和切换分支命令：<code>git switch -c dev</code>创建并切换到新的dev分支；<code>git switch master</code>切换到已有的master分支；</li><li><code>git branch</code>：查看所有分支和当前分支；</li><li><code>git branch -d dev</code>：删除dev分支；</li><li><code>git merge dev</code>：将dev分支合并到当前分支；</li><li>推荐做法：在分支完成某个任务，将分支合并到master后再删除分支，使得过程更安全；</li><li>发生冲突时，git会自动在文件中标注出冲突位置，我们只需手动修改即可，修改的最终内容可以与任意一个合并分支都不同；然后重新add和commit即可；</li><li>分支管理策略<ul><li><code>Fast forward</code>：通常合并分支的模式，删除分支后会丢掉分支信息；</li><li><code>--on-ff</code>：命令如<code>git merge --no-ff -m "merge with no-ff" dev</code>，会在merge时生成一个新的commit，从分支历史上就可以看出分支信息；</li></ul></li><li>bug修复<ul><li><code>git stash</code>：储藏当前工作现场，以后可恢复现场，用于当前工作未完成，无法提交时，转去修复一个bug或进行其他工作；</li><li><code>git stash list</code>：列出所有stash；</li><li><code>git stash apply (stash@{0})</code>：恢复stash内容，但不删除该stash，需要再用<code>git stash drop</code>删除；如果有多个stash则需要加括号内容指定一个stash；</li><li><code>git stash pop</code>：恢复并删除stash内容；</li><li><code>git cherry-pick+提交号简写</code>：将该次提交所做的修改在当前分支上也修改并提交，通常用于将一个分支的bug修复也应用到其他分支上；</li></ul></li><li><code>git branch -D &lt;name&gt;</code>：强行删除一个没有被合并过的分支；</li><li><code>git remote</code> :查看远程库的信息；加<code>-v</code>参数显示详细信息；</li><li><code>git push origin dev</code>是将本地的dev分支推送到远程的dev分支；</li><li>通常需要将本地master和dev分支与远程保持同步，其他分支如果需要与他人合作就也保持同步；</li><li><code>git clone</code>只克隆远程的master分支，创建远程dev分支到本地的命令：<code>git checkout -b dev origin/dev</code>；</li><li>如果<code>git pull</code>提示<code>no tracking information</code>，需要先创建本地dev分支和远程origin/dev分支的链接：<code>git branch --set-upstream-to=origin/dev dev</code>；</li><li><code>git rebase</code>：将分叉的提交历史整理为一条直线，方法是将本地未push的提交放到远程的提交之后，这会导致自己提交的修改变成是基于远程的提交所作出的修改；</li></ul><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java再学习笔记</title>
      <link href="/2021/09/19/java-zai-xue-xi-bi-ji/"/>
      <url>/2021/09/19/java-zai-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p> 参考资料：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">Java教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><ul><li><p>类要加上public修饰，否则不能从命令行执行；</p></li><li><p>数字可以用下划线分割；</p></li><li><p>long型的结尾需要加L，float型需要加上f后缀，double不需要；</p></li><li><p>String是引用类型，引用类型的变量类似于C语言的指针，它内部存储一个“地址”，指向某个对象在内存的位置；</p></li><li><p>final用于定义常量，常量名通常全部大写；</p></li><li><p>var关键字：用于代替太长的类型名，编译器会根据赋值语句自动推断出正确的类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上会自动变成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义变量时，要遵循作用域最小化原则，尽量将变量定义在尽可能小的作用域，并且，不要重复使用变量名；</p></li><li><p>溢出不会出错，却会得到一个奇怪的结果；</p></li><li><p>对<code>byte</code>和<code>short</code>类型进行移位时，会首先转换为<code>int</code>再进行位移；</p></li><li><p>整数运算在除数为<code>0</code>时会报错，而浮点数运算在除数为<code>0</code>时，不会报错，但会返回几个特殊值：</p><ul><li><p><code>NaN</code>表示Not a Number</p></li><li><p><code>Infinity</code>表示无穷大</p></li><li><p><code>-Infinity</code>表示负无穷大</p></li><li><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">double d1 = 0.0 / 0; // NaNdouble d2 = 1.0 / 0; // Infinitydouble d3 = -1.0 / 0; // -Infinity<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>强制转型：可以将浮点数强制转型为整数。在转型时，浮点数的小数部分会被丢掉。如果转型后超过了整型能表示的最大范围，将返回整型的最大值。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">12.3</span><span class="token punctuation">;</span> <span class="token comment">// 12</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">12.7</span><span class="token punctuation">;</span> <span class="token comment">// 12</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">12.7</span><span class="token punctuation">;</span> <span class="token comment">// -12</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">12.7</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span><span class="token keyword">int</span> n4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1.2e20</span><span class="token punctuation">;</span> <span class="token comment">// 2147483647</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要进行四舍五入，可以对浮点数加上0.5再强制转型；</p></li><li><p>布尔量与运算要用&amp;&amp;而不是&amp;；</p></li><li><p>Java在内存中总是使用Unicode表示字符；</p></li><li><p>字符串连接：可以用“+”连接任意字符串和其它数据类型，会将其他数据类型先自动转型为字符串，再连接；</p></li><li><p>多行字符串：从Java 13开始，字符串可以用<code>"""..."""</code>表示多行字符串了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            SELECT * FROM            users            WHERE id &gt; 100            ORDER BY name DESC            """</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述多行字符串实际上是5行，在最后一个<code>DESC</code>后面还有一个<code>\n</code>。如果我们不想在字符串末尾加一个<code>\n</code>，就需要这么写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            SELECT * FROM             users           WHERE id &gt; 100           ORDER BY name DESC"""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要注意到，多行字符串前面共同的空格会被去掉，即：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""...........SELECT * FROM...........  users...........WHERE id &gt; 100...........ORDER BY name DESC..........."""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>.</code>标注的空格都会被去掉。如果多行字符串的排版不规则，那么，去掉的空格就会变成这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token triple-quoted-string string">""".........  SELECT * FROM.........    users.........WHERE id &gt; 100.........  ORDER BY name DESC.........  """</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即总是以最短的行首空格为基准；</p></li><li><p>引用类型的变量没有赋初值时，值为null；</p></li><li><p>数组所有元素初始化为默认值；</p></li><li><p>数组有属性length；</p></li><li><p>数组可通过<code>int[] ns = { 68, 79, 91, 85, 62 };</code>的简洁方式初始化；</p></li><li><p><code>println</code>是print line的缩写，表示输出并换行；</p></li><li><table><thead><tr><th align="left">占位符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">%d</td><td align="left">格式化输出整数</td></tr><tr><td align="left">%x</td><td align="left">格式化输出十六进制整数</td></tr><tr><td align="left">%f</td><td align="left">格式化输出浮点数</td></tr><tr><td align="left">%e</td><td align="left">格式化输出科学计数法表示的浮点数</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr></tbody></table><p>注意，由于%表示占位符，因此，连续两个%%表示一个%字符本身；</p></li><li><p>浮点数在计算机中常常无法精确表示，并且计算可能出现误差，因此，判断浮点数相等用<code>==</code>判断不靠谱，正确的方法是利用差值小于某个临界值来判断；</p></li><li><p>引用类型的<code>==</code>判断是否指向同一个对象；</p></li><li><p>switch的可行缩进方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>switch</code>语句还可以匹配字符串。字符串匹配时，是比较“内容相等”，如<code>case "apple": </code>；</p></li><li><p>switch表达式：</p><p>使用<code>switch</code>时，如果遗漏了<code>break</code>，就会造成严重的逻辑错误，而且不易在源代码中发现错误。从Java 12开始，<code>switch</code>语句升级为更简洁的表达式语法，使用类似模式匹配（Pattern Matching）的方法，保证只有一种路径会被执行，并且不需要<code>break</code>语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"apple"</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"pear"</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"mango"</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected mango"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good choice!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No fruit selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意新语法使用<code>-&gt;</code>，如果有多条语句，需要用<code>{}</code>括起来。不要写<code>break</code>语句，因为新语法只会执行匹配的语句，没有穿透效应；</p><p>使用新的<code>switch</code>语法，不但不需要<code>break</code>，还可以直接返回值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"apple"</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"mango"</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 注意赋值语句要以;结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yield：大多数时候，在<code>switch</code>表达式内部，我们会返回简单的值。但是，如果需要复杂的语句，我们也可以写很多语句，放到<code>{...}</code>里，然后，用<code>yield</code>返回一个值作为<code>switch</code>语句的返回值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"apple"</span> <span class="token operator">-&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"mango"</span> <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">int</span> code <span class="token operator">=</span> fruit<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">yield</span> code<span class="token punctuation">;</span> <span class="token comment">// switch语句返回值</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>switch</code>的计算结果必须是整型、字符串或枚举类型；</p></li><li><p><code>Arrays.toString(ns)</code>方便地获取整个数组的字符串表示；</p></li><li><p>二维数组的每个数组元素的长度并不要求相同；</p></li><li><p><code>Arrays.deepToString(ns)</code>获取多维数组的字符串表示；</p></li><li><p>一个Java源文件可以包含多个类的定义，但只能定义一个public类，且public类名必须与文件名一致，其他类不加public即可。如果要定义多个public类，必须拆到多个Java源文件中；</p></li><li><p><code>str.inBlank()</code>检查str是否为空字符串；</p></li><li><p>获取的字符串str常常要去掉首尾空格，<code>str.strip()</code>；</p></li><li><p>this变量</p><p>在方法内部，可以使用一个隐含的变量<code>this</code>，它始终指向当前实例。因此，通过<code>this.field</code>就可以访问当前实例的字段。如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上<code>this</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment">// 前面的this不可少，少了就变成局部变量name了</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可变参数</p><p>可变参数用<code>类型...</code>定义，可变参数相当于数组类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNames</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>names <span class="token operator">=</span> names<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的<code>setNames()</code>就定义了一个可变参数。调用时，可以这么写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Group</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token string">"Xiao Ming"</span><span class="token punctuation">,</span> <span class="token string">"Xiao Hong"</span><span class="token punctuation">,</span> <span class="token string">"Xiao Jun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入3个String</span>g<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token string">"Xiao Ming"</span><span class="token punctuation">,</span> <span class="token string">"Xiao Hong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入2个String</span>g<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token string">"Xiao Ming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入1个String</span>g<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入0个String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全可以把可变参数改写为<code>String[]</code>类型，但是，调用方需要自己先构造<code>String[]</code>，比较麻烦。另一个问题是，调用方可以传入<code>null</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Group</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而可变参数可以保证无法传入<code>null</code>，因为传入0个参数时，接收到的实际值是一个空数组而不是<code>null</code>；</p></li><li><p>参数绑定：基本类型参数的传递，是调用方值的复制；引用类型参数的传递，是引用传递；</p></li><li><p>调用构造方法，必须用<code>new</code>操作符；如果我们自定义了一个构造方法，那么，编译器就不再自动创建默认构造方法；</p></li><li><p>在Java中，创建对象实例的时候，按照如下顺序进行初始化：</p><ol><li>先初始化字段，例如，<code>int age = 10;</code>表示字段初始化为<code>10</code>，<code>double salary;</code>表示字段默认初始化为<code>0</code>，<code>String name;</code>表示引用类型字段默认初始化为<code>null</code>；</li><li>执行构造方法的代码进行初始化。</li></ol></li><li><p>一个构造方法可以调用其他构造方法，这样做的目的是便于代码复用。调用其他构造方法的语法是<code>this(…)</code>：</p><pre class="line-numbers language-none"><code class="language-none">class Person {    private String name;    private int age;    public Person(String name, int age) {        this.name = name;        this.age = age;    }    public Person(String name) {        this(name, 18); // 调用另一个构造方法Person(String, int)    }    public Person() {        this("Unnamed"); // 调用另一个构造方法Person(String)    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>继承时，只需定义新增的字段和方法；</p></li><li><p>继承有个特点，就是子类无法访问父类的<code>private</code>字段或者<code>private</code>方法；为了让子类可以访问父类的字段，我们需要把<code>private</code>改为<code>protected</code>；</p></li><li><p><code>super</code>关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code>，也可以不加或用<code>this.fieldName</code>。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在某些时候，就必须使用<code>super</code>。我们来看一个例子：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Xiao Ming"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上面的代码，会得到一个编译错误，大意是在<code>Student</code>的构造方法中，无法调用<code>Person</code>的构造方法。这是因为在Java中，任何<code>class</code>的构造方法，第一行语句必须是调用父类的构造方法。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code>，但是，<code>Person</code>类并没有无参数的构造方法，因此，编译失败，解决方法是调用<code>Person</code>类存在的某个构造方法；</p><ul><li>子类不会继承任何父类的构造方法；</li></ul></li><li><p>正常情况下，只要某个class没有<code>final</code>修饰符，那么任何类都可以从该class继承。从Java 15开始，允许使用<code>sealed</code>修饰class，并通过<code>permits</code>明确写出能够从该class继承的子类名称：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Rect</span><span class="token punctuation">,</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Triangle</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>sealed</code>类在Java 15中目前是预览状态，要启用它，必须使用参数<code>--enable-preview</code>和<code>--source 15</code>；</p></li><li><p>向上转型（upcasting）：一个引用类型为父类的变量，指向其子类实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>向下转型（downcasting）：若将父类变量a指向的实例向下转型为子类变量b指向的实例，则只有在a原本就是子类的实例时才能成功；因此为了避免向下转型出错，Java提供了<code>instanceof</code>操作符，可以先判断一个实例究竟是不是某种类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">Student</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个引用变量为<code>null</code>，那么对任何<code>instanceof</code>的判断都为<code>false</code>。</p><p>利用<code>instanceof</code>，在向下转型前可以先判断。从Java 14开始，判断<code>instanceof</code>后，可以直接转型为指定变量，避免再次强制转型。例如，对于以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以改写如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 可以直接使用变量s:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）；</p></li><li><p>多态：Java的实例方法调用是基于运行时的实际类型的动态调用，而非变量的声明类型（而C++需要用虚函数才能实现）；</p></li><li><p>Object的方法：<code>toString(),equals(),hashCode()</code>；</p></li><li><p>在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过<code>super</code>来调用。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用父类的hello()方法:</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用<code>final</code>修饰的方法不能被<code>Override</code>，用<code>final</code>修饰的类不能被继承，用<code>final</code>修饰的字段在初始化后不能被修改，可以在构造方法中初始化final字段；</p></li><li><p>抽象方法：<code>abstract</code>关键字修饰的方法，无需具体实现，相当于C++中的纯虚函数，含有抽象方法的类必须声明为抽象类，从抽象类继承的子类必须实现抽象方法；如果不实现抽象方法，则该子类仍是一个抽象类；</p></li><li><p>当我们定义了抽象类<code>Person</code>，以及具体的<code>Student</code>、<code>Teacher</code>子类的时候，我们可以通过抽象类<code>Person</code>类型去引用具体的子类的实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种尽量引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程；</p></li><li><p>面向抽象编程的本质就是：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心；</li></ul></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li><p>如果一个抽象类没有字段，所有方法全部都是抽象方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>就可以把该抽象类改写为接口：<code>interface</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口不能有字段，定义的所有方法默认都是<code>public abstract</code>的；</p></li><li><p>一个类可以实现多个接口；</p></li><li><p>接口继承：一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法；</p></li><li><p>在使用的时候，实例化的对象永远只能是某个具体的子类，但总是通过接口去引用它，因为接口比抽象类更抽象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用List接口引用具体子类的实例</span><span class="token class-name">Collection</span> coll <span class="token operator">=</span> list<span class="token punctuation">;</span> <span class="token comment">// 向上转型为Collection接口</span><span class="token class-name">Iterable</span> it <span class="token operator">=</span> coll<span class="token punctuation">;</span> <span class="token comment">// 向上转型为Iterable接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在接口中，可以定义<code>default</code>方法。例如，把<code>Person</code>接口的<code>run()</code>方法改为<code>default</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Xiao Ming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类可以不必覆写<code>default</code>方法。<code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法；<code>default</code>方法和抽象类的普通方法是有所不同的。因为<code>interface</code>没有字段，<code>default</code>方法无法访问字段，而抽象类的普通方法可以访问实例字段；</p></li></ul><h3 id="静态字段和静态方法"><a href="#静态字段和静态方法" class="headerlink" title="静态字段和静态方法"></a>静态字段和静态方法</h3><ul><li><p>静态字段：一个类的所有实例共享一个静态字段，无论修改哪个实例的静态字段，效果都是一样的，因此推荐使用<code>类名.静态字段</code>而不是<code>实例变量.静态字段</code>；</p></li><li><p>静态方法：类似其他语言的函数，可通过类名直接调用，可以访问静态字段和其他静态方法；静态方法经常用于工具类和辅助方法；</p></li><li><p>接口的静态字段：</p><p><code>interface</code>不能定义实例字段，但可以有静态字段，并且静态字段必须为<code>final</code>类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MALE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FEMALE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，因为<code>interface</code>的字段只能是<code>public static final</code>类型，所以我们可以把这些修饰符都去掉，编译器会自动加上<code>public statc final</code>，上述代码可以简写为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> MALE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> FEMALE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li><p>包类似于C++的命名空间，用于解决名字冲突；类名只是一个简写，真正的完整类名是<code>包名.类名</code>；</p></li><li><p>在定义<code>class</code>的时候，我们需要在第一行声明这个<code>class</code>属于哪个包；</p></li><li><p>包可以是多层结构，用<code>.</code>隔开；包没有父子关系，java.util和java.util.zip是不同的包，两者没有任何继承关系；</p></li><li><p>没有定义包名的<code>class</code>，它使用的是默认包，非常容易引起名字冲突，因此，不推荐不写包名的做法；</p></li><li><p>目录结构需要按照包结构组织；</p></li><li><p>包作用域：位于同一个包的类，可以访问包作用域的字段和方法。不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域。例如，<code>Person</code>类定义在<code>hello</code>包下面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">// 包作用域:</span>    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Main</code>类也定义在<code>hello</code>包下面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以调用，因为Main和Person在同一个包</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用其他class的方法：</p><ul><li>直接写出完整类名；</li><li>用<code>import</code>语句，然后写简单类名；</li><li> <code>import static</code>的语法，可以导入可以导入一个类的静态字段和静态方法（很少用）；</li></ul></li><li><p>import中，*不导入子包的class，不推荐这种写法，因为在导入了多个包后，很难看出一个类属于哪个包；</p></li><li><p>Java编译器最终编译出的<code>.class</code>文件只使用完整类名，因此，在代码中，当编译器遇到一个<code>class</code>名称时：</p><ul><li>如果是完整类名，就直接根据完整类名查找这个<code>class</code>；</li><li>如果是简单类名，按下面的顺序依次查找：<ul><li>查找当前<code>package</code>是否存在这个<code>class</code>；</li><li>查找<code>import</code>的包是否包含这个<code>class</code>；</li><li>查找<code>java.lang</code>包是否包含这个<code>class</code>。</li></ul></li></ul><p>如果按照上面的规则还无法确定类名，则编译报错；</p></li><li><p>如果有两个<code>class</code>名称相同，例如，<code>mr.jun.Arrays</code>和<code>java.util.Arrays</code>，那么只能<code>import</code>其中一个，另一个必须写完整类名；</p></li><li><p>为了避免名字冲突，我们需要确定唯一的包名。推荐的做法是使用倒置的域名来确保唯一性；</p></li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>public：定义为<code>public</code>的<code>class</code>、<code>interface</code>可以被其他任何类访问，定义为<code>public</code>的<code>field</code>、<code>method</code>可以被其他类访问，前提是首先有访问<code>class</code>的权限；</p></li><li><p>private：定义为<code>private</code>的<code>field</code>、<code>method</code>无法被其他类访问，推荐把<code>private</code>方法放到后面，因为<code>public</code>方法定义了类对外提供的功能，阅读代码的时候，应该先关注<code>public</code>方法；嵌套类拥有访问<code>private</code>的权限；</p></li><li><p>protected：定义为<code>protected</code>的字段和方法可以被子类访问，以及子类的子类；</p></li><li><p>package：包作用域指一个类允许访问同一个<code>package</code>的没有<code>public</code>、<code>private</code>修饰的<code>class</code>，以及没有<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法；</p></li><li><p>用<code>final</code>修饰局部变量可以阻止被重新赋值，如函数形参：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">abc</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// error!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最佳实践：如果不确定是否需要<code>public</code>，就不声明为<code>public</code>，即尽可能少地暴露对外的字段和方法；</p></li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>//todo</p><h3 id="classpath和jar"><a href="#classpath和jar" class="headerlink" title="classpath和jar"></a>classpath和jar</h3><ul><li><p>classpath是JVM搜索class的路径，建议在启动JVM时设置，即给<code>java</code>命令传入<code>-classpath</code>或<code>-cp</code>参数，而不是在系统环境变量中设置：</p><pre class="line-numbers language-none"><code class="language-none">java -classpath .;C:\work\project1\bin;C:\shared abc.xyz.Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>JVM默认的classpath为<code>.</code>，即当前目录；</p></li><li><p>jar包实际上就是一个zip格式的压缩文件，而jar包相当于目录，它可以把<code>package</code>组织的目录层级，以及各个目录下的所有文件（包括<code>.class</code>文件和其他文件）都打成一个jar文件；如果我们要执行一个jar包的<code>class</code>，就可以把jar包放到<code>classpath</code>中，这样JVM会自动在<code>hello.jar</code>文件里去搜索某个类：</p><pre class="line-numbers language-none"><code class="language-none">java -cp ./hello.jar abc.xyz.Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建jar包：压缩为zip文件并将后缀改为jar；</p></li><li><p>jar包还可以包含一个特殊的<code>/META-INF/MANIFEST.MF</code>文件，<code>MANIFEST.MF</code>是纯文本，可以指定<code>Main-Class</code>和其它信息。JVM会自动读取这个<code>MANIFEST.MF</code>文件，如果存在<code>Main-Class</code>，我们就不必在命令行指定启动的类名，而是用更方便的命令：</p><pre class="line-numbers language-none"><code class="language-none">java -jar hello.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jar包还可以包含其它jar包，这个时候，就需要在<code>MANIFEST.MF</code>文件里配置<code>classpath</code>了；</p></li><li><p>在大型项目中，不可能手动编写<code>MANIFEST.MF</code>文件，再手动创建zip包。Java社区提供了大量的开源构建工具，例如Maven，可以非常方便地创建jar包；</p></li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>//todo</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学知识总结</title>
      <link href="/2021/09/17/gao-deng-shu-xue-zhi-shi-zong-jie/"/>
      <url>/2021/09/17/gao-deng-shu-xue-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p> 参考资料：《张宇考研数学基础30讲》</p><h2 id="数列极限"><a href="#数列极限" class="headerlink" title="数列极限"></a>数列极限</h2><ul><li>夹逼准则 p27、单调有界准则；</li></ul><h2 id="函数极限与连续性"><a href="#函数极限与连续性" class="headerlink" title="函数极限与连续性"></a>函数极限与连续性</h2><ul><li>夹逼准则；</li><li>泰勒公式：计算极限的重要工具；</li><li>归结原理 p37；</li></ul><h2 id="中值定理-p85"><a href="#中值定理-p85" class="headerlink" title="中值定理 p85"></a>中值定理 p85</h2><ul><li>涉及函数的中值定理<ul><li>前提：f(x)在[a,b]上连续；</li><li>有界与最值定理；</li><li>介值定理；</li><li>平均值定理；</li><li>零点定理；</li></ul></li><li>涉及导数（微分）的中值定理<ul><li>费马定理；</li><li>罗尔定理；</li><li>拉格朗日中值定理；</li><li>柯西中值定理；</li><li>泰勒公式（带拉格朗日余项、皮亚诺余项的n阶泰勒公式）、麦克劳林公式；</li></ul></li></ul><h2 id="多元函数微分学"><a href="#多元函数微分学" class="headerlink" title="多元函数微分学"></a>多元函数微分学</h2><ul><li>拉格朗日乘数法 p164；</li></ul><h2 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h2><ul><li>级数敛散性的判别方法 p199</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程知识总结</title>
      <link href="/2021/09/16/ruan-jian-gong-cheng-zhi-shi-zong-jie/"/>
      <url>/2021/09/16/ruan-jian-gong-cheng-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="0-综述"><a href="#0-综述" class="headerlink" title="0.综述"></a>0.综述</h2><ul><li>熟悉软件工程基本概念、<strong>软件过程</strong>、常用<strong>软件开发模型</strong>；</li><li>软件过程：需求流、分析流、设计流、实现流、测试流、交付后维护、退役；</li><li>重点掌握<strong>结构化方法</strong>和<strong>面向对象方法</strong>软件开发模型的构建；</li></ul><h2 id="1-软件工程的范畴"><a href="#1-软件工程的范畴" class="headerlink" title="1.软件工程的范畴"></a>1.软件工程的范畴</h2><p><img src="%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.assets/1.%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%8C%83%E7%95%B4.png" alt="1.软件工程的范畴"></p><ul><li>维护：软件因存在问题或因有改进或适应性需求时，对代码及相应文档所进行修改”的过程；因此无论何时，只要软件被修改，就是维护；</li><li>将测试活动贯穿于整个软件生命周期中；</li></ul><h2 id="2-软件生命周期模型"><a href="#2-软件生命周期模型" class="headerlink" title="2.软件生命周期模型"></a>2.软件生命周期模型</h2><p><img src="%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.assets/2.%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A8%A1%E5%9E%8B-16317767064671.png" alt="2.软件生命周期模型"></p><ul><li>瀑布模型：带反馈环的线性生命周期模型；</li><li>迭代-递增生命周期模型：迭代和递增相互结合使用、五个工作流；</li></ul><p><img src="%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.assets/%E8%BF%AD%E4%BB%A3%E5%92%8C%E9%80%92%E5%A2%9E.png" alt="迭代和递增"></p><ul><li>开源生命周期模型；</li><li>敏捷过程：不怎么强调分析和设计；很早就开始实现（能工作的软件比具体的文档更重要）；响应需求变化；与客户密切协作；时光盒和站会；</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论知识总结</title>
      <link href="/2021/09/16/gai-lu-lun-zhi-shi-zong-jie/"/>
      <url>/2021/09/16/gai-lu-lun-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-随机事件与概率"><a href="#1-随机事件与概率" class="headerlink" title="1.随机事件与概率"></a>1.随机事件与概率</h2><ul><li>加法公式：$P(A\cup B)=P(A)+P(B)-P(AB)$；</li><li>减法公式：$P(A-B)=P(A)-P(AB)=P(A\bar{B})$；</li><li>条件概率公式；</li><li>乘法公式；</li><li>全概率公式：$P(B)=\sum_{i=1}^nP(A_i)P(B|A_i)$；</li><li>贝叶斯公式（逆概率公式）：$P(A_j|B)=\frac{P(A_j)P(B|A_j)}{\sum_{i=1}^nP(A_i)P(B|A_i)}$  （分母就是全概率公式P(B))，在P(B)未知时可用；</li><li>n重伯努利概型（指一种实验）；</li></ul><h2 id="2-一维随机变量及其分布"><a href="#2-一维随机变量及其分布" class="headerlink" title="2.一维随机变量及其分布"></a>2.一维随机变量及其分布</h2><ul><li>分布函数性质：单调不减函数、右连续函数、F(-∞)=0，F(+∞)=1；</li><li>常见随机变量分布类型：<ul><li>离散型<ul><li>0-1分布，X~B(1,p)，即只进行一次的伯努利实验</li><li>二项分布，X~B(n,p)</li><li>泊松分布，X~P(λ)，$P(X=k)=\frac{\lambda ^k}{k!}e^{-\lambda}$</li><li>几何分布</li><li>超几何分布</li></ul></li><li>连续型<ul><li>均匀分布，X~U(a,b)</li><li>指数分布</li><li>正态分布</li></ul></li></ul></li></ul><h2 id="3-多维随机变量及其分布"><a href="#3-多维随机变量及其分布" class="headerlink" title="3.多维随机变量及其分布"></a>3.多维随机变量及其分布</h2><ul><li>联合分布函数，边缘分布函数；</li><li>概率密度，边缘概率密度，条件概率密度；</li><li>随机变量的相互独立性：设二维随机变量(X,Y)的联合分布函数为F(x,y)，边缘分布函数分别为$F_X(x),F_Y(y)$，如果对任意实数x，y都有$F(x,y)=F_X(x)\cdot F_Y(y)$，则称X与Y相互独立；</li><li>扩展到n维随机变量，如果联合分布函数等于边缘分布函数的乘积，则各随机变量相互独立；</li><li>若为n维连续型随机变量，则相互独立还等价于“概率密度等于边缘概率密度相乘”；</li><li>多维随机变量函数的分布，如U=X+Y；</li></ul><h2 id="4-随机变量的数字特征"><a href="#4-随机变量的数字特征" class="headerlink" title="4.随机变量的数字特征"></a>4.随机变量的数字特征</h2><ul><li><p>数学期望：算式绝对收敛才称数学期望存在；</p></li><li><p>方差；$D(X\pm Y)=DX+DY\pm 2\rm{Cov}(X,Y)$，各分布的期望及方差等信息见张宇P496；</p></li><li><p>切比雪夫不等式：如果随机变量X的方差DX存在，则对任意ε&gt;0，有$P{|X-EX|\geq \varepsilon}\leq\frac{DX}{\varepsilon^2}$或$P{|X-EX|&lt; \varepsilon}\geq1-\frac{DX}{\varepsilon^2}$，大致描述了X与其期望接近的程度和其方差大小之间的关系；</p></li><li><p>协方差：如果随机变量X与Y的方差存在且DX&gt;0，DY&gt;0，则称$E[(X-EX)(Y-EY)]$ 为X和Y的协方差，记作Cov(X,Y)，$\rm{Cov}(X,Y)=E[(X-EX)(Y-EY)]=E(XY)-EX\cdot EY$；</p></li><li><p>相关系数：$\rho_{XY}=\frac{\rm{Cov}(X,Y)}{\sqrt{DX}\sqrt{DY}}$，如果为0，则称X与Y不相关，否则称相关；相关系数绝对值小于等于1；Y=aX+b时，若a&gt;0，$\rho=1$；若a&lt;0，$\rho=-1$；</p></li><li><p>$\rm{Cov}(X,X)=DX，\rho_{XX}=1$；</p></li></ul><h2 id="5-大数定律和中心极限定理"><a href="#5-大数定律和中心极限定理" class="headerlink" title="5.大数定律和中心极限定理"></a>5.大数定律和中心极限定理</h2><ul><li>设随机变量X与随机变量序列${X_n}$，如果对任意的$\varepsilon$&gt;0，有$\lim_{n\rightarrow\infty}P{|X_n-X|\geq\varepsilon}=0$或$\lim_{n\rightarrow\infty}P{|X_n-X|&lt;\varepsilon}=1$，则称随机变量序列${X_n}$依概率收敛于随机变量X，记为$\lim_{n\rightarrow \infty}X_n=X(P)$或$X_n\overset{P}{\rightarrow}X(n\rightarrow \infty)$；</li><li>切比雪夫大数定律，不要求同分布，随机变量的均值依概率收敛于其期望的均值，P509；</li><li>伯努利大数定律，在n重伯努利试验中，事件A发生的频率/实验总次数依概率收敛于A发生的概率p；</li><li>辛钦大数定律，独立同分布的随机变量序列，如果$EX_i=\mu$存在，则随机变量序列的均值依概率收敛于μ；</li><li>列维-林德伯格中心极限定理，独立同分布的随机变量序列${X_n}$，期望$\mu$和方差$\sigma^2$存在，则当n很大时，$\sum_{i=1}^nX_i$近似服从正态分布$N(n\mu,n\sigma^2)$；</li><li>棣莫弗-拉普拉斯中心极限定理，假设随机变量（不是序列）$Y_n$服从二项分布，则当n很大时，$Y_n$近似服从正态分布$N(np,np(1-p))$；</li></ul><h2 id="6-数理统计"><a href="#6-数理统计" class="headerlink" title="6.数理统计"></a>6.数理统计</h2><ul><li>总体，样本，样本的分布，统计量，观测值；</li><li>常用统计量：<ul><li>样本数字特征<ul><li>样本均值</li><li>样本方差</li><li>样本标准差</li><li>样本k阶（原点）矩</li><li>样本k阶中心矩</li></ul></li><li>第k、最小、最大顺序统计量</li></ul></li><li>卡方分布：若随机变量$X_1,X_2,\cdots,X_n$相互独立且服从标准正态分布，则随机变量$X=\sum_{i=1}^nX_i^2$服从自由度为n的卡方分布，EX=n,DX=2n；</li><li>t分布：设随机变量$X\sim N(0,1),Y\sim \chi^2(n)$，X与Y相互独立，则随机变量$t=\frac{X}{\sqrt{Y/n}}$ 服从自由度为n的t分布，其概率密度函数关于x=0对称，因此Et=0；</li><li>F分布：设随机变量$X\sim \chi^2(n_1),Y\sim \chi^2(n_2)$，X与Y相互独立，则随机变量$F=\frac{X/n_1}{Y/n_2}$ 服从自由度为$(n_1,n_2)$的F分布；</li><li>参数估计：由样本估计总体X的分布函数F(x;θ)的未知参数θ；估计量（一个由样本得到theta的统计量）和估计值（代入具体样本得到的θ值）;<ul><li>参数的点估计，得到一个具体的θ值<ul><li>矩估计法：令样本矩=总体矩，即$\frac{1}{n}\sum_{i=1}^nX_i^l=E(X^l)(l=1,2,\cdots,k)$，这是一个包含k个未知参数$\theta_1,\theta_2,\cdots,\theta_k$ 的k个联立方程组（矩法方程），由此解得$\hat{\theta_l}(l=1,2,\cdots,k)$；</li><li>最大似然估计法：<ul><li>思想：在参数可能的取值范围$ I $内选取使“样本获此观测值$x_1,x_2,\cdots,x_n$”的概率最大的参数值 $\hat{\theta}$ 作为 $\theta$ 的估计；</li><li>$X_1,X_2,\cdots,X_n$为X的一个样本，则$X_1,X_2,\cdots,X_n$取值为$x_1,x_2,\cdots,x_n$的概率是$P{X_1=x_1,X_2=x_2,\cdots,X_n=x_n}=\prod_{i=1}^nP{X_i=x_i}=\prod_{i=1}^np(x_i;\theta)$，这个概率值是$\theta$ 的函数，将其记为$L(\theta)=\prod_{i=1}^np(x_i;\theta)$，即样本的似然函数；若存在$\hat{\theta}\in I$ ，使似然函数在θ的取值范围内取最大值，则称$\hat{\theta}$为参数$\theta$的最大似然估计值，相应统计量为最大似然估计量；若总体X为连续型随机变量，则将上述$p(x_i;\theta)$ 替换为$f(x_i;\theta)$ （概率密度）；</li><li>通常解法：取对数后求导；</li></ul></li><li>估计量的评价标准<ul><li>无偏性：$\hat{\theta}=\hat{\theta}(X_1,X_2,\cdots,X_n)$对一切n及$\theta \in I$有$E(\theta)=\theta$；</li><li>有效性（最小方差性）：设$\hat{\theta_1}$，$\hat{\theta_2}$都是θ的无偏估计量，如果$D(\hat{\theta_1})&lt;D(\hat{\theta_2})$，则称$\hat{\theta_1}$比$\hat{\theta_2}$有效；</li><li>一致性（相合性）：若$\hat{\theta}\overset{P}{\rightarrow}\theta(n\rightarrow\infty)$，则为一致估计量；</li></ul></li></ul></li><li>参数的区间估计：给定置信度求未知参数置信区间的问题；<ul><li>置信区间：$(\hat{\theta_1},\hat{\theta_2})$是$\theta$的置信度为1-α的置信区间，置信下限、置信上限，1-α为置信度或置信水平，α为显著性水平；</li><li>枢轴量的分布；</li></ul></li><li>假设检验：<ul><li>原假设$H_0$：没有充分理由不能轻易否定的假设；备择假设$H_1$：其否定的陈述；</li><li>对$H_0$的显著性检验：对原假设作出否定或不否定的推断；</li><li>基本思想：小概率原理，若发生了小概率事件则拒绝原假设，这个小概率就是显著性水平；</li><li>拒绝域：由拒绝原假设的全体样本点所组成的集合C；接收域：C的补集C*；</li><li>双边检验：拒绝域位于接收域的两侧；单边检验；</li><li>两类错误：弃真和取伪；</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数知识总结</title>
      <link href="/2021/09/15/xian-xing-dai-shu-zhi-shi-zong-jie/"/>
      <url>/2021/09/15/xian-xing-dai-shu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-行列式"><a href="#1-行列式" class="headerlink" title="1.行列式"></a>1.行列式</h2><ul><li>余子式：在n阶行列式中，去掉元素a<del>ij</del>所在的第i行、第j列元素，由剩下的元素按原来的位置和顺序组成的n-1阶行列式称为元素a<del>ij</del>的余子式，记作M<del>ij</del>。</li><li>代数余子式：A<del>ij</del>=(-1)^i+j^M<del>ij</del>；</li><li>行列式按某一行（列）展开的展开公式：$$ \left |A \right |=\sum_{j=1}^{n}a_{ij}A_{ij}(i=1,2,\cdots,n)$$；</li></ul><h2 id="2-矩阵"><a href="#2-矩阵" class="headerlink" title="2.矩阵"></a>2.矩阵</h2><ul><li>矩阵的秩：A中最高阶非零子式的阶数称为矩阵A的秩，记为r(A)；</li><li>子式和非零子式：在矩阵中选取k行与k列，交叉点上的k^2个元素按原来位置组成的行列式称为一个k阶子式。若这个子式不等于0，就称为一个非零子式；</li><li>$$ r(A_{n\times n})=n \Leftrightarrow \left | A \right |\neq0\Leftrightarrow A可逆  $$</li><li>矩阵秩的本质就是组成该矩阵的线性无关的向量的个数；</li><li>正交矩阵：设A是n阶方阵，满足$$A^TA=E$$，则称A是正交矩阵。$$A是正交矩阵\Leftrightarrow A^TA=E\Leftrightarrow A^T=A^{-1}\Leftrightarrow A的行（列）向量组是标准正交向量组$$；</li><li>标准（单位）正交向量组：两两内积为0，自己和自己内积为1；</li><li>伴随矩阵：将行列式|A|的n^2^个元素的代数余子式按如下形式排成的矩阵称为A的伴随矩阵，记作A*：</li></ul><p>$$A^*=\begin{bmatrix}A_{11}&amp;A_{21}&amp;\cdots&amp;A_{n1}\A_{12}&amp;A_{22}&amp;\cdots&amp;A_{n2}\\vdots&amp;\vdots&amp;&amp;\vdots\A_{1n}&amp;A_{2n}&amp;\cdots&amp;A_{nn}\\end{bmatrix}$$</p><p>且有$$AA^*=A^<em>A=\left|A\right|E$$，$$\left|A^</em>\right|=\left|A\right|^{n-1}$$；</p><ul><li>初等变换：倍乘、倍加、互换；</li><li>初等矩阵：经单位矩阵经过一次初等变换得到的矩阵；对矩阵A进行初等行变换，相当于矩阵A左乘相应初等矩阵，初等列变换对应右乘初等矩阵；</li><li>若A是可逆矩阵，则A可以表示成有限个初等矩阵的乘积；</li><li>等价矩阵：设A,B为m×n矩阵，若存在可逆矩阵P<del>m×m</del>，Q<del>n×n</del>，使得PAQ=B，则称A，B是等价矩阵；</li><li>等价标准型：若A等价于形如$$\begin{bmatrix}E_r&amp;O\O&amp;O\end{bmatrix}$$的矩阵（r是A的秩），后者称为A的等价标准型，即$$PAQ=\begin{bmatrix}E_r&amp;O\O&amp;O\end{bmatrix}$$；</li><li>初等变换不改变矩阵的秩：设A是m×n矩阵，P，Q分别是m阶、n阶可逆矩阵，则$$ r(A)=r(PA)=r(AQ)=r(PAQ)$$；</li></ul><h2 id="3-向量组"><a href="#3-向量组" class="headerlink" title="3.向量组"></a>3.向量组</h2><ul><li><p>线性相关：对m个n维向量，a1,a2,…,am，若存在一组不全为零的数k1，k2，…，km，使得$$k_1a_1+k_2a_2+\cdots+k_ma_m=0$$，则称该向量组线性相关；反之为线性无关；</p></li><li><p>含有零向量或有成比例向量的向量组必线性相关；</p></li><li><p>判别线性相关性的七大定理：</p><ul><li>向量组$ a_1,a_2,\cdots,a_n$线性相关的充要条件是向量组中至少有一个向量可由其余n-1个向量线性表出；</li><li>若向量组$$ a_1,a_2,\cdots,a_n$$线性无关，而$$ \beta,a_1,a_2,\cdots,a_n$$线性相关，则β可由$$ a_1,a_2,\cdots,a_n$$线性表示，且表示法唯一；</li><li>如果向量组$$\beta_1,\beta_2,\cdots,\beta_t$$可由向量组$$ a_1,a_2,\cdots,a_s$$线性表示，且t&gt;s，则$$\beta_1,\beta_2,\cdots,\beta_t$$线性相关（以少表多，多的相关）；</li><li>向量组线性相关的充分必要条件是对应的齐次线性方程组Ax=0有非零解，其中A=[a1,a2,…,am]；</li><li>若向量β可由向量组$$ a_1,a_2,\cdots,a_n$$线性表出，等价于非齐次方程Ax=β有解，等价于$$ a_1,a_2,\cdots,a_n$$的秩等于$$ \beta ,a_1,a_2,\cdots,a_n$$的秩；反之，若向量β不可由向量组$$ a_1,a_2,\cdots,a_n$$线性表出，等价于非齐次方程Ax=β无解，等价于$$ a_1,a_2,\cdots,a_n$$的秩不等于$$ \beta ,a_1,a_2,\cdots,a_n$$的秩；</li><li>如果向量组$$ a_1,a_2,\cdots,a_n$$中有一部分向量线性相关，则整个向量组也线性相关；</li><li>线性无关的向量组添加分量仍线性无关，线性相关的向量组去掉分量仍线性相关；</li></ul></li><li><p>极大线性无关组：在向量组$$ a_1,a_2,\cdots,a_s$$中，若存在部分组$$ a_{i_1},a_{i_2},\cdots,a_{i_r}$$，满足：</p><ul><li>$$ a_{i_1},a_{i_2},\cdots,a_{i_r}$$线性无关；</li><li>向量组中任一向量均可由其线性表出；</li></ul><p>则称该向量组为原向量组的极大线性无关组；（一般不唯一）</p></li><li><p>等价向量组：两个向量组，如果其中一个向量组的每个向量都可由另一个向量组线性表出，则称该向量组可由另一个向量组线性表出；若其可以相互线性表出，则称向量组是等价向量组，记为（Ⅰ）≌（Ⅱ）；</p></li><li><p>向量组和其极大线性无关组是等价向量组；</p></li><li><p>向量组的极大线性无关组中所含向量的个数称为向量组的秩，等价向量组等秩，反之未必成立；</p></li><li><p>矩阵的秩=行秩=列秩；</p></li><li><p>若A初等行变换后得到B，则A的行向量组和B的行向量组是等价向量组；</p></li><li><p>若向量组β1…t可由α1…s线性表出，则r(β1…t)&lt;=r(α1…s)；（别记反了！！）</p></li><li><p>向量空间，基，维数，坐标，基变换、坐标变换，基变换公式，坐标变换公式，过渡矩阵；</p></li></ul><h2 id="4-线性方程组"><a href="#4-线性方程组" class="headerlink" title="4.线性方程组"></a>4.线性方程组</h2><ul><li>求解线性方程组，就是对增广矩阵作初等行变换，化为行阶梯形矩阵，然后求解；</li></ul><h3 id="齐次线性方程组"><a href="#齐次线性方程组" class="headerlink" title="齐次线性方程组"></a>齐次线性方程组</h3><ul><li><p>$$A_{m\times n}=\begin{bmatrix}a_{11}&amp;a_{12}&amp;\cdots&amp;a_{1n}\a_{21}&amp;a_{22}&amp;\cdots&amp;a_{2n}\\vdots&amp;\vdots&amp;&amp;\vdots\a_{m1}&amp;a_{m2}&amp;\cdots&amp;a_{mn}\\end{bmatrix}$$，$$x=\begin{bmatrix}x_1\x_2\\vdots\x_n\end{bmatrix}$$；</p></li><li><p>有解的条件：r(A)=n，有唯一零解；r(A)=r&lt;n时，有非零解，且有n-r个线性无关解；</p></li><li><p>解的线性组合仍为解；</p></li><li><p>基础解系：设$$\xi_1,\xi_2,\cdots,\xi_{n-r}$$满足</p><ul><li>均是方程组Ax=0的解</li><li>线性无关</li><li>方程组Ax=0的任一解均可由其线性表出，</li></ul><p>则称$$\xi_1,\xi_2,\cdots,\xi_{n-r}$$为Ax=0的基础解系；</p></li><li><p>通解：$$k_1\xi_1+k_2\xi_2+\cdots+k_{n-r}\xi_{n-r}$$，k为任意常数；</p></li></ul><h3 id="非齐次线性方程组"><a href="#非齐次线性方程组" class="headerlink" title="非齐次线性方程组"></a>非齐次线性方程组</h3><ul><li>Ax=b，$$b=\begin{bmatrix}b_1\b_2\\vdots\b_m\end{bmatrix}$$，其维度对应A的列向量；增广矩阵；</li><li>有解的条件：<ul><li>若r(A)!=r([A,b])，即b不能由$$ a_1,a_2,\cdots,a_n$$线性表出，则无解；</li><li>若r(A)=r([A,b])=n，即$$ a_1,a_2,\cdots,a_n$$线性无关，$$ a_1,a_2,\cdots,a_n,b$$ 线性相关，则方程组有唯一解；</li><li>若r(A)=r([A,b])=r&lt;n，则方程组有无穷多解；</li></ul></li><li>解的性质：<ul><li>设$$\eta_1,\eta_2,…$$为Ax=b的解，$$\xi$$是对应Ax=0的解，则</li><li>$$\eta_1-\eta_2$$是Ax=0的解；</li><li>$$k\xi+\eta$$是Ax=b的解；</li></ul></li><li>求解方法和步骤：<ul><li>求Ax=0的通解$$k_1\xi_1+k_2\xi_2+\cdots+k_{n-r}\xi_{n-r}$$；</li><li>求Ax=b的一个特解$$\eta$$；</li><li>则Ax=b的通解为$$k_1\xi_1+k_2\xi_2+\cdots+k_{n-r}\xi_{n-r}+\eta$$，其中k为任意常数；</li></ul></li></ul><h2 id="5-特征值与特征向量"><a href="#5-特征值与特征向量" class="headerlink" title="5.特征值与特征向量"></a>5.特征值与特征向量</h2><ul><li>$$A\xi=\lambda\xi$$，A是n阶矩阵，λ是一个数，ξ是n维非零列向量，则称λ是A的特征值，ξ是A的对应于特征值λ的特征向量；</li><li>特征矩阵：λE-A，特征多项式：|λE-A|，|λE-A|=0，用于求特征值；</li><li>特征值的性质：<ul><li>设$$A={(a_{ij})}_{n\times n}$$，$$\lambda_i(i=1,2,\cdots,n)$$是A的特征值，则</li><li>$$\sum_{i=1}^n\lambda_i=\sum_{i=1}^na_{ii}=\rm{tr}(A)$$；</li><li>$$\prod_{i=1}^n\lambda_i=|A|$$；</li></ul></li><li>特征向量的性质：<ul><li>k重特征值λ至多有k个线性无关的特征向量；</li><li>A的属于不同特征值的特征向量线性无关；</li><li>若$$\xi_1,\xi_2$$是A的属于同一特征值的特征向量，则$$k_1\xi_1+k_2\xi_2$$（k1,k2不同时为零）仍是属于该特征值的特征向量；</li></ul></li><li>矩阵的相似：A，B是两个n阶方阵，若存在n阶可逆矩阵P，使得$$P^{-1}AP=B$$，则称A相似于B，记成$$A\sim B$$；</li><li>相似矩阵的性质：<ul><li>r(A)=r(B)</li><li>$$|A|=|B|$$</li><li>$$|\lambda E-A|=|\lambda E-B|$$</li><li>A，B有相同的特征值</li><li>$$f(A)\sim f(B)$$，f(x)为多项式；</li><li>$$A^T\sim B^T$$，A可逆时$$A^<em>\sim B^</em>$$</li></ul></li><li>矩阵的相似对角化，就是将A相似于对角矩阵$$\Lambda=\begin{bmatrix}<br>\lambda_1 &amp;  &amp;  &amp; \<br> &amp; \lambda_2 &amp;  &amp; \<br> &amp;  &amp; \ddots &amp; \<br> &amp;  &amp;  &amp; \lambda_n<br>\end{bmatrix}$$（其相似标准型），即$$P^{-1}AP=\Lambda$$，则称A可相似对角化；</li><li>n阶矩阵A可相似对角化等价于：<ul><li>A有n个线性无关的特征向量</li><li>A的k重特征值有k个线性无关的特征向量；</li></ul></li><li>n阶矩阵A有n个不同的特征值=&gt;A可相似对角化；</li><li>n阶矩阵A为实对称矩阵=&gt;A可相似对角化；</li><li>实对称矩阵的属于不同特征值的特征向量相互正交；</li></ul><h2 id="6-二次型"><a href="#6-二次型" class="headerlink" title="6.二次型"></a>6.二次型</h2>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1364 医院设置</title>
      <link href="/2021/09/12/luo-gu-p1364-yi-yuan-she-zhi/"/>
      <url>/2021/09/12/luo-gu-p1364-yi-yuan-she-zhi/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1364">P1364 医院设置 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/61834"><strong>Huawei360</strong></a>的题解。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vi</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token function">chkmax</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token function">chkmin</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> dis<span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> dis<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dis<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dis<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">+</span> cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">chkmin</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">dp</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树的重心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1347 排序</title>
      <link href="/2021/09/12/luo-gu-p1347-pai-xu/"/>
      <url>/2021/09/12/luo-gu-p1347-pai-xu/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1347">P1347 排序 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/45696"><strong>gogoduan</strong></a>的题解。</p><p>本题要求找到能正确确定元素大小关系的时刻，而拓扑排序可以解决这种问题。关键在于如何确定是否可以确定这些元素的顺序了，以及如何发现存在矛盾。</p><p>在拓扑排序时，我们加入一个属性：排序的层数。每当一个新元素因为入度减为0而加入队列时，令它的层数为当前元素的层数加一。如此，只有当所有n个元素有严格的大小顺序时，拓扑排序结束时的层数才能正好为n。因此最大层数为n时，就可确定n个元素的大小顺序。</p><p>而如果拓扑排序没有将<strong>当前已出现的元素</strong>遍历完，则说明有环存在。当前已出现指在已经加入的边中作为端点出现过。</p><p>如果所有边都加入后，还没有出现上述两种情况，则无法确定这n个元素的顺序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vi</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token function">chkmin</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> a<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token function">chkmax</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> in<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span>in2<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vi adj<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span> <span class="token comment">//用于记录当前已出现的元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> path<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">//d为排序的层数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>path<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> qu<span class="token punctuation">;</span><span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//maxd为最大深度，cnt为排序到的结点数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> i<span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>node c <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>path<span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chkmax</span><span class="token punctuation">(</span>maxd<span class="token punctuation">,</span> c<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>c<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> nxt <span class="token operator">=</span> adj<span class="token punctuation">[</span>c<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>in<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nxt<span class="token punctuation">,</span>c<span class="token punctuation">.</span>d <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>maxd <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//第一种结果</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//第二种结果</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> p <span class="token operator">:</span> path<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>adj<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in2<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> in2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>in2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sorted sequence determined after "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" relations: "</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Inconsistency found after "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" relations."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sorted sequence cannot be determined."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P3916 图的遍历</title>
      <link href="/2021/09/12/luo-gu-p3916-tu-de-bian-li/"/>
      <url>/2021/09/12/luo-gu-p3916-tu-de-bian-li/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P3916">P3916 图的遍历 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/20375"><strong>hongzy</strong></a>的题解。</p><p>从这道题应该学会<strong>反向思考</strong>，题中需要求每个点能到达的最大结点编号，我们反其道而行之，反向建边，然后从最大的结点号开始dfs，求这些结点都能到达哪些结点即可。代码很简单就不贴了。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷CF698B Fix a Tree</title>
      <link href="/2021/09/12/luo-gu-cf698b-fix-a-tree/"/>
      <url>/2021/09/12/luo-gu-cf698b-fix-a-tree/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/CF698B">CF698B Fix a Tree - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。</p><p>首先，本题中的图可能不是连通的，这种情况可以用并查集维护每个连通块的个数和连通块的“根”的信息，这里“根”加引号是因为，可能有的子图没有根。</p><p>由于每个节点只有一或零个父节点，因此每个连通子图要么是一棵树，要么是一个简单环，即每个有环的连通子图只能有一个环，且只能有支链沿着父节点进入环，不能出环。</p><p>综上，我们的思路是，首先用并查集统计子图的数量n，如果所有的子图都是简单环，则每个环需要改一个节点的父节点，即输出n，然后先拆一个环，产生一个根节点，然后其他每个环取一个节点，将其父节点设置为该根节点即可；如果有子图不是环，则该树不用编辑，且该树的根节点就作为根节点，其他子图如果是树，其根的父节点设为该根节点，如果是环，则将一个节点的父节点改为该根节点即可；其实由于子树的根节点的父节点标记为自己，也可以将子树也视为环，这样就将两种情况统一了。</p><p>那么如何在一个包含环的子图中找到一个环中的节点呢？只需对每个节点作dfs，如果搜索过程中遇到了本次dfs中搜索过的结点，这个搜索过的结点就是环中的结点。因此，将vis分为0，1，2三种状态，0表示没有搜索过，1表示本次dfs中搜索过，2表示之前的dfs中搜索过，每搜到一个新节点，将该节点的vis置为1，回溯时再置为2即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mp</span> <span class="token expression">make_pair</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">fi</span> <span class="token expression">first</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">se</span> <span class="token expression">second</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">vi</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pi</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mod</span> <span class="token expression"><span class="token number">998244353</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token function">chkmin</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> a<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">bool</span> <span class="token function">chkmax</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>ll <span class="token function">ksm</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> ll ns <span class="token operator">=</span> <span class="token function">ksm</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ns <span class="token operator">=</span> ns <span class="token operator">*</span> ns <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ns <span class="token operator">=</span> ns <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span> <span class="token keyword">return</span> ns<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">;</span><span class="token keyword">bool</span> hasRoot<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> fax <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> fay <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fax <span class="token operator">==</span> fay<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cnt<span class="token operator">--</span><span class="token punctuation">;</span>fa<span class="token punctuation">[</span>fax<span class="token punctuation">]</span> <span class="token operator">=</span> fay<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//最终的树根还未确定时</span>root <span class="token operator">=</span> idx<span class="token punctuation">;</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//最终的根已经确定时</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>cnt <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">Union</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//检查子图中是否有子树，并标记其根节点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>root <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> hasRoot <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//dfs找环、修改环中元素父节点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hasRoot<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> dfs </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1441 砝码称重</title>
      <link href="/2021/09/10/luo-gu-p1441-fa-ma-cheng-chong/"/>
      <url>/2021/09/10/luo-gu-p1441-fa-ma-cheng-chong/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1441">P1441 砝码称重 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。参考<a href="https://www.luogu.com.cn/user/43486"><strong>hsfzLZH1</strong></a>的题解。</p><p>首先用dfs枚举去掉砝码的方案（因为去掉的砝码比保留的砝码少，可以节约一些时间），然后对每种方案用<strong>01背包</strong>求可组成的重量种数，<code>f[i][j]</code>表示遍历到第i个砝码，是否能组成重量j，用滚动数组压缩为一维。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> chosen<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> f<span class="token punctuation">[</span><span class="token number">20005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token string">'0'</span> <span class="token operator">||</span> c<span class="token operator">&gt;</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是48吧？</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x <span class="token operator">*=</span> f<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tmpres<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//sum为当前已经考虑的砝码的重量总和，可节约dp时间</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chosen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> sum<span class="token punctuation">;</span> v <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//当前令f[v]为true的v最大为sum</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>f<span class="token punctuation">[</span>v <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//!f[v+a[i]]是为了不重复计数</span>f<span class="token punctuation">[</span>v <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>tmpres<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmpres<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>chosen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chosen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">read</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fill</span><span class="token punctuation">(</span>chosen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chosen <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> dfs </tag>
            
            <tag> 01背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1126 机器人搬重物</title>
      <link href="/2021/09/10/luo-gu-p1126-ji-qi-ren-ban-chong-wu/"/>
      <url>/2021/09/10/luo-gu-p1126-ji-qi-ren-ban-chong-wu/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1126">P1126 机器人搬重物 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。</p><p>本题在通常的求bfs求最短路基础上添加了一个面朝方向的属性，因此一个状态由其横纵坐标和方向构成，vis数组也要多开一个方向维度。在加入方向的题中，一个易错点是一定要将每个方向和其坐标的变化对应正确。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>d<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//多开一个方向维度</span><span class="token keyword">int</span> X<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//注意这里要和方向对应正确！</span><span class="token keyword">int</span> dcost<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">st</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">//d面朝方向，0-3表示北、东、南、西</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//bfs与通常的求最短路的bfs思路基本一致，只是增加了方向的改变，以及一些细节需要考虑</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>st<span class="token operator">&gt;</span> qu<span class="token punctuation">;</span>qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a1<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>d <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>a1<span class="token punctuation">]</span><span class="token punctuation">[</span>b1<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> size <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>st c <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>x <span class="token operator">==</span> a2 <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>y <span class="token operator">==</span> b2<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token comment">//对下一个操作进行枚举</span>            <span class="token comment">//右转</span><span class="token keyword">int</span> nd <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> nx <span class="token operator">=</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> ny <span class="token operator">=</span> c<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>nd <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token comment">//左转</span>nd <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>d <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>nx <span class="token operator">=</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> ny <span class="token operator">=</span> c<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>nd <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//前进1-3步</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> nd <span class="token operator">=</span> c<span class="token punctuation">.</span>d<span class="token punctuation">;</span><span class="token keyword">int</span> nx <span class="token operator">=</span> c<span class="token punctuation">.</span>x <span class="token operator">+</span> X<span class="token punctuation">[</span>nd<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> ny <span class="token operator">=</span> c<span class="token punctuation">.</span>y <span class="token operator">+</span> Y<span class="token punctuation">[</span>nd<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>                <span class="token comment">//通常bfs要考虑的三个限制条件：出界、已访问过、遇到障碍</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> nx <span class="token operator">&gt;=</span> n <span class="token operator">||</span> ny <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> ny <span class="token operator">&gt;=</span> m <span class="token operator">||</span> G<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//细节：如果已经出界或遇到障碍则不能继续前行，直接break</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>nd <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">char</span> dir<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a1 <span class="token operator">&gt;&gt;</span> b1 <span class="token operator">&gt;&gt;</span> a2 <span class="token operator">&gt;&gt;</span> b2<span class="token operator">&gt;&gt;</span>dir<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">'N'</span><span class="token operator">:</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈总结</title>
      <link href="/2021/09/09/dan-diao-zhan-zong-jie/"/>
      <url>/2021/09/09/dan-diao-zhan-zong-jie/</url>
      
        <content type="html"><![CDATA[<p> 参考资料：[<a href="https://blog.csdn.net/lucky52529/article/details/89155694">数据结构]——单调栈_lucky52529的博客-CSDN博客</a></p><p>单调栈，顾名思义，就是保持栈内元素单调增或单调减的栈。但单调栈中并不存放对应的元素，而存放这些元素的下标。</p><p>用处：和单调队列比较理解，单调队列是维持一个区间的最大值或最小值，而单调栈则是获取每一个元素作为区间的最大值或最小值时的最大区间，也可以理解为获得前一个或后一个比当前元素大/小的元素位置。各元素是在出栈时得到处理。</p><p>以获取元素作为区间最大值时的最大区间为例，我们需要的栈是从栈底到栈顶单调递减的（别忘了实际存的是递减元素的下标）。具体实现时，只需依次压栈原数组的每个元素，在压栈之前先将栈顶使单调性质不成立的元素依次出栈即可。设原先从栈底到栈顶的元素为a,c,当前元素为b，a&lt;b&lt;c，所以在压栈b之前需要将c出栈，才能保持栈的单调特性；而a实际就是c前方第一个大于c的元素下标，b是c后面第一个大于c的元素下标，因此在[a+1,b-1]下标范围之间c是最大值，这就是所求的最大区间。</p><p>以[<a href="https://blog.csdn.net/lucky52529/article/details/89155694">数据结构]——单调栈_lucky52529的博客-CSDN博客</a>的三道例题为例，讲解一下用我的思路的理解方式：</p><p>1.视野总和</p><p>本题实际就是对每个元素，找后面第一个比该元素大的元素位置，因此根据上面的分析，用单调栈就是很直白的了。</p><p>2.柱状图中的最大矩形</p><p>本题可转化为，对每个柱子，求以该柱子的高度为高时，矩形的最大面积，也就是找其横坐标的最大区间，最大矩形一定产生在这些矩形之中，即转化为单调栈问题。</p><p>3.求最大区间</p><p>同样是求每个元素为最小值时的最大区间。</p><p>最后以<a href="https://www.luogu.com.cn/problem/P5788">P5788 【模板】单调栈 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>为例，给出单调栈的实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>stack<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> st<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span> <span class="token comment">//在栈底铺一个最大元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span> <span class="token comment">//在最后也用一个最大元素，将栈中剩余的元素都赶出栈，本题没有用到</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">//出栈时对出栈元素作处理</span>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> INF<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//本题需特殊处理栈中剩余元素，res置零</span>res<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能、机器学习及深度学习知识总结</title>
      <link href="/2021/09/08/ren-gong-zhi-neng-ji-qi-xue-xi-ji-shen-du-xue-xi-zhi-shi-zong-jie/"/>
      <url>/2021/09/08/ren-gong-zhi-neng-ji-qi-xue-xi-ji-shen-du-xue-xi-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p> 参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/78798251?utm_source=qq">【机器学习】K-means（非常详细） - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/heaad/archive/2010/12/20/1911614.html">大白话解析模拟退火算法 - 苍梧 - 博客园 (cnblogs.com)</a></p><h2 id="模拟退火算法-Simulated-Annealing"><a href="#模拟退火算法-Simulated-Annealing" class="headerlink" title="模拟退火算法 Simulated Annealing"></a>模拟退火算法 Simulated Annealing</h2><ul><li>爬山法的改进，改进其容易陷入局部最优解的问题；</li><li>引入随机因素，若移动后的解比当前解差，以一定的概率接受它，且这个概率随着时间推移逐渐降低；若移动后得到更优解则总是接受新解；</li><li>概率表示为 **P(dE) = exp( dE/(kT) )*<em>，dE为新解和旧解的评价函数的差；移动后的解比当前解差时，dE&lt;0，P(dE)∈(0,1)。产生一个0到1之间的随机数，如果p(dE)大于随机数就接收新解，否则解不变，T=r</em>T (0&lt;r&lt;1)；</li></ul><h2 id="支持向量机SVM"><a href="#支持向量机SVM" class="headerlink" title="支持向量机SVM"></a>支持向量机SVM</h2><ul><li>解决问题：二分类；</li><li>超平面的线性方程：$ w^{T} x + b = 0 $，能用这样的方程分类的样本就称线性可分；</li><li>若超平面能将样本点正确分类，则对样本$ (x_i,y_i) $ ，有</li></ul><p>$\begin{cases}w^T x_i +b \geq +1, &amp; y_i=+1\w^T x_i +b \leq -1, &amp; y_i=-1\\end{cases}$   </p><ul><li>支持向量：距离超平面最近的几个训练样本点；</li><li><strong>间隔</strong>：两个异类支持向量到超平面的距离之和，$ \gamma = \frac {2}{ \left | w \right| } $。</li><li>目标：在正确分类的基础上，让间隔最大；</li><li>求解最大间隔的<strong>对偶</strong>问题(?)即可解出 $w$ 和 $b$ 。得到</li></ul><p>$ f(x)=w^T x + b = \sum_{i=1}^{m}a_i y_i x_i ^T x + b $</p><p>并且上述过程需满足KKT条件(?)：</p><p>$\left{\begin{matrix}<br>\alpha_i \geq 0;\<br>y_i f(x_i)-1 \geq 0;\<br>\alpha_i(y_i f(x_i)-1)=0.<br>\end{matrix}\right.$</p><p>因此对所有的样本i，至少满足 $ \alpha_i=0$ 或 $ y_i f(x_i)=1 $ 之一。 $ \alpha_i=0$ 时，该样本不出现在 $f(x)$ 中，因此无影响； $ y_i f(x_i)=1 $ 时，该样本为支持向量。因此最终模型仅与支持向量有关。</p><ul><li><p><strong>核函数</strong></p><ul><li><p>例如“异或”等问题的样本不是线性可分的；</p></li><li><p>对这样的问题，可将样本从原始空间映射到一个更高维的特征空间，使样本在这个特征空间内线性可分；若原始空间是有限维的，则一定存在一个高维特征空间使样本可分；令 $ \phi(x) $ 表示将 $ x $ 映射后的特征向量；</p></li><li><p>此时求解求最大间隔的对偶问题中， $ x_i^T x_j $ 的项就成为 $ \phi (x_i^T) \phi(x_j) $ ，而新特征空间的维数可能很高，甚至是无穷维，因此计算此项很困难。为避开该障碍，设想如下函数：</p><p>$ \kappa(x_i,x_j)=\left&lt; \phi (x_i), \phi(x_j) \right&gt;=\phi (x_i^T) \phi(x_j),$ </p></li></ul><p>​        即 $ x_i $ 与 $ x_j $ 在特征空间的内积等于它们在原始样本空间中通过函数 $ \kappa(\cdot , \cdot) $ 计算的结果，该函数就是<strong>核函数</strong>，模型最优解也可通过训练样本的核函数展开；</p><ul><li>只要一个对称函数对应的核矩阵半正定，它就能作为核函数使用；</li><li>“核函数选择”是支持向量机的最大变数，不同核函数映射到不同特征空间，关系到其性能；</li></ul></li><li><p>支持向量回归（SVR）：同样是找一个超平面，但目标是拟合样本。因此方式大致相同，只是对目标函数和约束条件作相应调整；</p></li><li><p>核方法：一系列基于核函数的学习方法，最常见的是通过“核化”（引入核函数），将线性学习器拓展为非线性学习器；</p></li></ul><h2 id="k近邻（kNN）"><a href="#k近邻（kNN）" class="headerlink" title="k近邻（kNN）"></a>k近邻（kNN）</h2><ul><li><p>k近邻是监督学习方法；</p></li><li><p>工作机制：给定测试样本，基于某种距离度量找出训练集中与其最靠近的k个训练样本，基于这k个“邻居”的信息来进行预测；</p></li><li><p>通常，在分类任务中，可使用“投票法”，选择k个样本中出现最多的类别标记为预测结果；</p></li><li><p>回归任务中可使用“平均法”；</p></li><li><p>还可基于距离远近进行加权平均或加权投票；</p></li><li><p>“懒惰学习”的代表，即训练阶段仅仅把样本保存起来，训练时间开销为零；</p></li><li><p>对比K-means：</p><ul><li>把n个点划分到k个聚类中，使得每个点都属于离他最近的均值（聚类中心）对应的聚类；NP hard；</li><li>算法步骤：<ul><li>选择初始化的 k 个样本作为初始聚类中心  $ a=a_1, a_2,\cdots ,a_k $；</li><li>针对数据集中每个样本 <img src="https://www.zhihu.com/equation?tex=x_i" alt="[公式]"> 计算它到 k 个聚类中心的距离并将其分到距离最小的聚类中心所对应的类中；</li><li>针对每个类别 <img src="https://www.zhihu.com/equation?tex=a_j" alt="[公式]"> ，重新计算它的聚类中心 <img src="https://www.zhihu.com/equation?tex=a_j=%5Cfrac%7B1%7D%7B%5Cleft%7C+c_i+%5Cright%7C%7D%5Csum_%7Bx%5Cin+c_i%7Dx" alt="[公式]"> （即属于该类的所有样本的质心）；</li><li>重复上面 2 3 两步操作，直到达到某个中止条件（迭代次数、最小误差变化等）;</li></ul></li><li>K 值需要人为设定，不同 K 值得到的结果不一样（kNN好像同）；</li></ul></li></ul><h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><ul><li><p>预处理</p><ul><li>原因：原始输入往往以深度学习架构难以表示的形式出现；</li></ul><ol><li>图像应该被标准化，使像素都在相同并且合理的范围内（如[0,1]或[-1,1]）；</li><li>将图像格式化为具有相同的比例；</li><li>数据集增强；</li><li>其他种类的预处理需要同时应用于训练集和测试集，目的是将每个样本置于更规范的形式，以减少模型需要考虑的变化量（如对每个像素减去训练样本的平均值、对比度归一化）；</li><li>全局对比度归一化（GCN）：通过从每个图像中减去其平均值，然后重新缩放使其像素上的标准差等于某个常数s来防止图像具有变化的对比度；局部对比度归一化（LCN）：确保对比度在每个小窗口上被归一化；</li></ol></li><li><p>数据集增强</p><ul><li>通过增加训练集的额外副本来增加训练集的大小，进而改进分类器的泛化能力；</li><li>这些额外副本可以通过对原始图像进行一些变化来生成，但并不改变其类别；</li><li>包括随机旋转、翻转、颜色的随机扰动、非线性几何变形等；</li></ul></li><li><p>生成式对抗网络</p><ul><li>生成器网络与判别器网络竞争；生成器网络直接产生样本 $ x=g(z;\theta^{(g)}) $ ，即输入白噪声输出图像x；判别器网络试图区分从训练数据抽取的样本和从生成器抽取的样本，发出由 $ d(x;\theta^{(d)}) $ 给出的概率值，指示 $ x $ 是真实训练样本而不是从模型抽取的伪造样本的概率；</li><li>可形式化为零和游戏，函数 $ v(\theta^{(g)},\theta^{(d)}) $ 确定判别器的收益，生成器接收 $ -v(\theta^{(g)},\theta^{(d)}) $ 作为它自己的收益。学习期间每个玩家尝试最大化自己的收益，因此收敛在 $ g^*=\arg\min\limits_{g}\max\limits_{d}v(g,d) $ ，即自变量g取使得该式满足时的值。</li><li>v的默认选择是 $ v(\theta^{(g)},\theta^{(d)})=\mathbb{E}<em>{\rm{X}\sim p</em>{data}}\log d(x)+\mathbb{E}<em>{x\sim p</em>{model}}\log (1-d(x)) $ ，即判别器让该式尽可能大，其中式子前边的X是从训练样本的概率分布中取样的，后面的x是生成器从其概率空间中随机取样生成的，判别器让前者的输出的期望尽可能接近1，让后者的输出的期望尽可能接近0，生成器相反；</li><li>收敛时，生成器的样本与实际数据不可区分，并且判别器处处都输出1/2，然后就可以丢弃判别器；</li><li>DCGAN：深度卷积GAN；cGAN：从分布 $ p(x|y) $ 中采样，而不是简单地从边缘分布 $ p(x) $ 中采样；</li></ul></li><li><p>卷积网络的Params：$c_o(c_ik^2+1)$，其中一个卷积核大小为$c_ik^2$，共$c_o$个卷积核，且每个卷积核有一个bias；</p></li><li><p>卷积网络的FLOPs：，$(2c_ik^2-1)\cdot h’w’c_o$，如果加上bias则去掉-1，其中$h’w’c_o$对应输出特征图的每个位置，$2c_ik^2-1$对应一次卷积操作，它可以拆分为$(c_ik^2)+(c_ik^2-1)$，前一项是乘法运算数，后一项是加法运算数，如果加入bias，则在这次卷积操作的结果上再作一次加法；</p></li></ul><h3 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h3><ul><li>object detection：在图像中框出目标的bounding box，标出其类别和置信度； instance segmentation：在上述的基础上，还要预测出目标的per-pixel mask。</li><li>指标mAP（mean Average Precision）：是对预测框和真实框的IoU及precision和recall作综合衡量的一种方法，既衡量了预测框个数是否准确，又衡量了其位置和真实框的匹配程度。方法是，首先定一个IoU阈值，只有超过阈值的预测框和真实框才算是True Positive。然后按照所有预测框的置信度从高到低排序，依次累积其TP和FP的个数，每累积一次就确定一个precision和recall点。将所有的点画在图上后，通过插值得到在precision轴上均匀分布的11个点，根据这些点计算auc，得到一个类的AP，所有类的AP均值就是mAP。</li><li></li></ul><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><ul><li>cross-entropy：鼓励一个正确的值，抑制其他的错误的值，可以用在对单一像素位置的预测上（Mask R-CNN中的Human Pose Estimation实验）。</li></ul><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ul><li>OHEM：online hard example mining：用于目标检测任务，一个示例是用于Fast R-CNN。在目标检测等一个batch的数据量较小的情况下，让模型自动均衡困难数据和简单数据的比例，筛选出loss较大的数据进一步学习，提升模型在困难数据上的性能。</li><li>不同形式信息的学习：如果信息之间有对应关系（如FloorNet中，点云和点云的密度分布图，以及室内图像之间都有相互对应的关系，以及Hierarchical CADNet中，B-rep和mesh之间的对应关系），就可以通过映射使相对应的信息进行交互；如果没有对应关系，就应该在不同的分支上学习。</li><li>多层次的学习：如图像中的多尺度学习。</li><li>当需要去除某些输入属性做消融实验时，可以将该属性从正态分布中随机抽样作为输入；</li><li>手动选取特征时，可能不是所有特征都对结果有积极作用，可能需要做feature engineering；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1886 滑动窗口 /【模板】单调队列</title>
      <link href="/2021/09/08/luo-gu-p1886-hua-dong-chuang-kou-mo-ban-dan-diao-dui-lie/"/>
      <url>/2021/09/08/luo-gu-p1886-hua-dong-chuang-kou-mo-ban-dan-diao-dui-lie/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1886">P1886 滑动窗口 /【模板】单调队列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/28164"><strong>hankeke</strong></a>的题解。</p><p>单调队列是维持滑动窗口中最大或最小值的数据结构，需要用到的操作包括：从队尾入队、从队尾出队和从队首出队，队尾出队的规则可以理解为排除法，即将不可能再成为最值的元素出队。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//求区间中最小值，此时队首元素是最小的，即需要输出的元素；队首到队尾元素严格递减。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1.从队尾开始依次将队中元素与a[i]比较，将不可能成为最小值了的元素出队，直到下一个元素仍可能成为最小值。由上一条注释可知队尾元素最大，最不可能是最小值，因此从队尾开始依次比较即可</span><span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//等于也可以，因为a[i]就可以代替与它相等的值了</span>        <span class="token comment">//2.a[i]入队，记录下标</span>q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//3.从队首将已不在区间中的元素出队</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">&lt;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//4.输出结果</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//最大值</span>head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> tail<span class="token operator">--</span><span class="token punctuation">;</span> q<span class="token punctuation">[</span><span class="token operator">++</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">&lt;</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> head<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1439 【模板】最长公共子序列</title>
      <link href="/2021/09/08/luo-gu-p1439-mo-ban-zui-chang-gong-gong-zi-xu-lie/"/>
      <url>/2021/09/08/luo-gu-p1439-mo-ban-zui-chang-gong-gong-zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1439">P1439 【模板】最长公共子序列 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/40959"><strong>heey</strong></a>的题解。</p><p>本题O(n^2)的解法较容易，主要学习O(n log n)的解法。由于本题中排列P1和P2都由相同元素1到n组成，因此可以将它们一起作映射。将P1映射为1，2，3，…，n，记录该映射，并将P2用同样方法映射，则问题转化为求P2的最长上升子序列，用其O(n log n)的解法即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token string">'0'</span> <span class="token operator">||</span> c<span class="token operator">&gt;</span><span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x <span class="token operator">*=</span> f<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mp<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//最长上升子序列解法</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> f<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1020 [NOIP1999 普及组] 导弹拦截</title>
      <link href="/2021/09/08/luo-gu-p1020-noip1999-pu-ji-zu-dao-dan-lan-jie/"/>
      <url>/2021/09/08/luo-gu-p1020-noip1999-pu-ji-zu-dao-dan-lan-jie/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1020">P1020 NOIP1999 普及组 导弹拦截 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/149392"><strong>w1049344862</strong></a>的题解。</p><p>首先，本题应用dilworth定理，即不上升子序列的最小个数等于最长上升子序列的长度，因此本题就是求一个最长不上升子序列长度和一个最长上升子序列长度。</p><p>动态规划方法为O(n^2)，本题主要讲解O(n log n)的方法。</p><p>设原数组为a[i]，我们以求最长不上升子序列为例。设f[len]为当前f数组的最后一个元素。首先让f[1]=a[1]。然后从a[2]开始依次读入a数组，对每个数a[i]，如果a[i]&lt;=f[len]，则可以直接加在后面：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">f<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>否则，我们找出f数组中第一个小于a[i]的元素，并用a[i]替换该元素，因此f[i]表示不上升序列的长度为i时，最后一个元素的最优情况，因此f数组最终也不是要求的那个子序列，只是工具罢了（叹；也可以理解为，既然a[i]小于等于最后一个数时才能加到末尾，那么这里替换的就是其<strong>对立面</strong>，也就是a[i]大于的第一个数，也就是第一个小于a[i]的数。</p><p>寻找该元素可以用upper_bound或lower_bound，可搭配<code>greater&lt;int&gt;()</code>食用！</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>f1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f1 <span class="token operator">+</span> len1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最终的len就是所求的最长长度啦！</p><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token string">'9'</span> <span class="token operator">||</span> c <span class="token operator">&lt;</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x <span class="token operator">*=</span> f<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> f1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> f2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>len1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>len2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span>f1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//求最长不上升子序列长度</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> f1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">)</span> f1<span class="token punctuation">[</span><span class="token operator">++</span>len1<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>f1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f1 <span class="token operator">+</span> len1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//求最长上升子序列长度</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> f2<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">)</span> f2<span class="token punctuation">[</span><span class="token operator">++</span>len2<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f2 <span class="token operator">+</span> len2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> len1 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> len2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1233 木棍加工</title>
      <link href="/2021/09/08/luo-gu-p1233-mu-gun-jia-gong/"/>
      <url>/2021/09/08/luo-gu-p1233-mu-gun-jia-gong/</url>
      
        <content type="html"><![CDATA[<p> 原题为 <a href="https://www.luogu.com.cn/problem/P1233">P1233 木棍加工 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/88449"><strong><em>Guoyh</em></strong></a>的题解。</p><p>将node先按长再按宽降序排序，这样我们只需考虑宽度就可以了，因为长度从前到后已经是非升序了，只要一个子序列中宽度是非升序，就能用一份准备时间加工完这些木棍。可以视为本题转化为求宽度维度的非升子序列的最小个数。根据dilworth定理，非升子序列的最小个数等于最长上升子序列的长度，易用dp解决。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> l <span class="token operator">==</span> b<span class="token punctuation">.</span>l <span class="token operator">?</span> w <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>w<span class="token operator">:</span>l <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;&gt;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>st <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> st <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">&gt;</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统知识总结</title>
      <link href="/2021/09/08/cao-zuo-xi-tong-zhi-shi-zong-jie/"/>
      <url>/2021/09/08/cao-zuo-xi-tong-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>进程和线程</p><ul><li>进程是具有一定功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源调度和分配的一个独立单位；</li><li>线程是进程内的一个可调度实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位；</li><li>一个进程可以有多个线程，进程之间可以并发执行，多个线程也可以并发执行；进程创建、撤销及切换的开销大于线程。而同一进程的线程间同步与通信开销小；</li><li>线程自己基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</li></ul></li><li><p>线程同步的方式</p><ul><li>互斥量：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问；</li><li>信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量；</li><li>事件（信号）：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作；</li></ul></li><li><p>进程的通信方式有哪些？</p><ul><li>协作进程可能影响另一个进程的执行或被另一个进程执行影响，协作进程需要一种进程间通信的机制来允许进程间交换数据与信息；</li><li>低级进程通信原语：P、V原语；</li><li>高级进程通信方式：<ul><li>共享存储器系统：相互通信的进程共享某些<strong>数据结构</strong>或共享<strong>存储区</strong>；</li><li>消息传递系统：在消息传递系统中，进程间的数据交换以消息为单位，程序员直接利用系统提供的一组通信命令（原语）来实现通信；消息传递系统因其实现方式不同可分为：<ul><li>直接通信方式：发送进程将消息发送到接收进程，并将其挂在接收进程的消息队列上；接收进程从消息队列上取消息；</li><li>间接通信方式：发送进程将消息发送到信箱，接收进程从信箱中取消息；</li></ul></li><li>管道通信系统或共享文件系统：管道（共享文件）通过连接读进程和写进程的共享文件来实现读写进程之间通信；</li></ul></li></ul></li><li><p>进程有哪几种状态？</p><ul><li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源；</li><li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数；</li><li>阻塞状态： 进程等待某种条件，在条件满足之前无法执行；</li></ul></li><li><p>分页和分段有什么区别？</p><ul><li>页是信息的物理单位，是为了减少内存碎片及提高内存利用率，是系统管理的需要。段是信息的逻辑单位，它含有一组意义相对完整的信息，分段的目的是为了更好地满足用户的需要。</li><li>页的大小固定且由系统决定，由硬件把逻辑地址划分为页号和页内地址两部分。段的长度不固定且由用户所编写的程序决定，通常由编译系统在对源程序进行编译时根据信息的性质来划分。</li><li>分页系统中作业的地址空间是一维的，分段系统中作业的地址空间是二维的。</li></ul></li><li><p>进程（作业）调度策略：FCFS(先来先服务)，最短作业优先调度、优先级调度，时间片轮转，高响应比优先调度算法（响应比=作业运行时间/估计运行时间=1+作业等待时间/估计运行时间）、多级反馈队列调度；</p></li><li><p>进程同步：</p><ul><li>竞争条件：多个进程并发访问和操作同一数据且执行结果与访问发生的特定顺序有关；为了避免竞争条件，并发进程必须同步；</li><li>访问临界资源应遵循的原则：空闲让进、忙则等待、有限等待、让权等待（当进程不能进入自己的临界区时，应立即释放处理机，以免进程陷入“忙等”状态）；</li><li>硬件同步：禁止中断方法、硬件指令方法、锁机制、读/写自旋锁；</li><li>信号量机制（wait，signal）；</li><li>管程<ul><li>管程定义了一个数据结构和能为并发进程所执行的一组操作，这组操作能同步进程和改变管程中的数据；</li><li>管程的构成：<ul><li>局部于管程的共享数据结构；</li><li>对共享数据结构进行操作的一组函数；</li><li>对局部于管程的数据设置初始值的语句；</li></ul></li></ul></li></ul></li><li><p>什么是死锁？死锁产生的条件？</p><ul><li>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲就是两个或多个进程无限期的阻塞、相互等待的一种状态；</li><li>互斥条件：一个资源一次只能被一个进程使用；</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放；</li><li>不剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺；</li><li>循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系；</li></ul></li><li><p>死锁的处理基本策略和常用方法</p><ul><li>基本策略：预防死锁、避免死锁、检测死锁、解除死锁；</li><li>常用方法：鸵鸟策略、预防死锁（破坏四个必要条件之一）、避免死锁（在资源的动态分配过程中，用某种方法来防止系统进入不安全状态，银行家算法）、检测与解除死锁；</li></ul></li><li><p>内存分配</p><ul><li>连续内存分配<ul><li>固定分区</li><li>动态分区存储管理</li><li>分区分配算法（用到空闲分区表或空闲分区链）<ul><li>首次适应算法、循环首次适应算法、最佳适应算法（要求空闲分区按容量大小递增的次序排列）、最坏适应算法（要求空闲分区按容量大小递减的次序排列）；</li></ul></li><li>可重定位分区分配技术（在动态分区分配算法基础上增加拼接功能）；</li><li>伙伴系统；</li></ul></li><li>分页存储管理</li><li>分段：<ul><li>由于分页按物理单位进行，没有考虑程序段的逻辑完整性，给程序段的共享和保护带来不便，另外动态链接及段的动态增长也要求以逻辑上完整的程序段为单位管理；</li><li>每个分段都从0开始编址并采用一段连续的地址空间，所以地址是二维的；</li><li>在进行存储分配时，以段为单位分配内存，每段分配一个连续的内存区，但各段之间不要求连续；</li></ul></li><li>段页式存储管理</li></ul></li><li><p>虚拟存储器：请求分页存储管理（在分页存储管理的基础上增加了请求调页和页面置换功能）、请求分段存储管理、请求调页的段页式存储管理；</p></li><li><p>页置换</p><ul><li>先进先出置换算法(FIFO)</li><li>最佳置换算法（OPT）：从内存中选择最长时间不会使用的页面予以淘汰；</li><li>最近最久未使用置换算法(LRU)；</li><li>简单时钟（clock）算法；</li><li>基于计数的页面置换；</li><li>页面缓冲算法；</li></ul></li><li><p>链接</p><ul><li>硬链接：基于索引节点的文件共享方式是通过在不同目录项中设置相同索引节点号来实现的。硬链接的不足是无法跨越文件系统；</li><li>符号链接：由系统创建一个LINK类型的新文件b1，并把新文件b1添加到B的目录中，以实现B的一个目录b1与文件f的链接。新文件中只包含被链接文件f的路径名，称这种链接方式为符号链接。也称为软链接；</li></ul></li><li><p>磁盘调度</p><ul><li>先来先服务调度FCFS；</li><li>最短寻道时间优先调度 SSTF；</li><li>扫描调度SCAN （look）；</li><li>循环扫描算法（CSCAN、C-LOOK）；</li></ul></li><li><p>RAID（独立磁盘冗余阵列）</p><ul><li>RAID 0级：按块级别分散的磁盘阵列，但没有冗余。磁盘系统的可靠性不好，故很少使用；</li><li>RAID 1级：指磁盘镜像。但磁盘利用率只有50%；</li><li>RAID 2级：也称为内存方式的差错纠正代码结构。每个字节有一个奇偶位，记录字节中1的个数，还将差错纠正代码存储在其他磁盘上。在实际中很少使用；</li><li>RAID 3级：也称为基于位交织的奇偶校验结构，是对级别2的改进。利用一台奇偶校验盘来完成容错。比磁盘镜像减少了所需的冗余磁盘数。常用于科学计算和图像处理。</li><li>RAID 4级：也称为块交织奇偶结构，另外在一独立磁盘上保存其他N个磁盘相应块的奇偶校验信息。</li><li>RAID 5级：也称为块交织分布奇偶结构。将数据和奇偶校验分布在所有N+1块磁盘上。是最常见的奇偶校验RAID系统。</li><li>在RAID6级中，也称为P+Q冗余方案。与RAID 5类似，但保存了额外冗余信息以防止多个磁盘出错，并使用差错纠正码。</li><li>RAID 0+1：是RAID 0与RAID 1的组合；RAID 1+0：即先镜像，再分散</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1280 尼克的任务</title>
      <link href="/2021/09/07/luo-gu-p1280-ni-ke-de-ren-wu/"/>
      <url>/2021/09/07/luo-gu-p1280-ni-ke-de-ren-wu/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1280">P1280 尼克的任务 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/3573"><strong>王尼玛</strong></a>的题解。</p><p>本题我原本认为状态应定义为<code>f[t][i]</code>，表示到时间t时，当前任务为第i个任务时，可获得的最大空闲时间；而正确做法是，由于如果按时间从前向后dp，则后面任务的选取会和前面的任务选取情况有关，所以采用逆序的dp，即从最后时刻向前dp。<code>f[i]</code>表示第i时刻为空闲或开始一个新任务时，该时刻到工作日结束可获得的最大空闲时间，则状态转移为：</p><p>如果没有该时刻开始的任务，<code>f[i]=f[i+1]+1;</code></p><p>如果有，则对每个任务，<code>f[i]=max(f[i],f[i+task.endtime+1]);</code></p><p>并不需要对当前进行的任务单独开一个维度记录状态，任务与时间已经联系在一起了。且如果某个时刻i一定是做某个工作当中，则<code>f[i]</code>的值不会被后续使用，所以取什么值都无所谓。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">task</span> <span class="token punctuation">{</span><span class="token keyword">int</span> bt<span class="token punctuation">,</span> et<span class="token punctuation">;</span><span class="token punctuation">}</span>t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> task<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> task<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>bt <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>bt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> tt<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> p <span class="token operator">&gt;&gt;</span> tt<span class="token punctuation">;</span>sum<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">,</span>p <span class="token operator">+</span> tt <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>t<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>et<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++知识总结</title>
      <link href="/2021/09/07/cpp-zhi-shi-zong-jie/"/>
      <url>/2021/09/07/cpp-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li> 面向对象程序设计语言有<strong>封装、继承和多态</strong>三种机制，这三种机制能够有效提高程序的可读性、可扩充性和可重用性；</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别；将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的源代码进行有机的结合，形成“类”，其中数据和函数都是类的成员。</li></ul><h3 id="继承和派生"><a href="#继承和派生" class="headerlink" title="继承和派生"></a>继承和派生</h3><ul><li>继承是类与类之间的关系，可以理解为一个类从另一个类获取成员变量和成员函数的过程；</li><li>派生和继承是一个概念，只是站的角度不同。继承是儿子接收父亲的产业，派生是父亲把产业传承给儿子；</li></ul><h3 id="多态（polymorphism）"><a href="#多态（polymorphism）" class="headerlink" title="多态（polymorphism）"></a>多态（polymorphism）</h3><ul><li>指的是同一名字的事物可以完成不同的功能。多态可以分为<strong>编译时的多态</strong>和<strong>运行时的多态</strong>。前者主要是指函数的重载（包括运算符的重载）、对重载函数的调用，在编译时就能根据实参确定应该调用哪个函数，因此叫编译时的多态；而后者则和<strong>继承、虚函数</strong>等概念有关，是本章要讲述的内容。后面提及的多态都是指运行时的多态；</li><li>通过基类指针只能访问派生类的成员变量，但是不能访问派生类的成员函数；为了解决这个问题，C++ 增加了<strong>虚函数</strong>。使用虚函数非常简单，只需要在函数声明前面增加 virtual 关键字；此时，基类指针可以按照基类的方式来做事，也可以按照派生类的方式来做事，它有多种形态，或者说有多种表现方式，我们将这种现象称为<strong>多态</strong>；C++中虚函数的唯一用处就是构成多态；</li><li>C++提供多态的目的是：可以通过基类指针对所有派生类（包括直接派生和间接派生）的成员变量和成员函数进行“全方位”的访问，尤其是成员函数。如果没有多态，我们只能访问成员变量；</li><li>引用也可以实现多态，不过引用不像指针灵活，指针可以随时改变指向，而引用只能指代固定的对象，在多态性方面缺乏表现力；</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><p>引用是 C++ 的新增内容，同指针一样，引用能够减少数据的拷贝，提高数据的传递效率；</p></li><li><p>基本类型的数据的内存拷贝非常快速，而数组、结构体、对象是一系列数据的集合，数据的数量没有限制，可能成千上万，对它们进行频繁的内存拷贝可能会消耗很多时间；</p></li><li><p>在 C++ 中，我们有了一种比指针<strong>更加便捷的传递聚合类型数据</strong>的方式，那就是<strong>引用（Reference）</strong>；</p></li><li><p>引用可以看做是数据的一个<strong>别名</strong>，通过这个别名和原来的名字都能够找到这份数据。引用类似于 Windows 中的快捷方式，一个可执行程序可以有多个快捷方式，通过这些快捷方式和可执行程序本身都能够运行程序；</p></li><li><p>语法格式为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">type <span class="token operator">&amp;</span>name <span class="token operator">=</span> data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>引用必须在定义的同时初始化，并且以后也要从一而终，不能再引用其它数据，这有点类似于常量；在定义时需要添加<code>&amp;</code>，在使用时不能添加<code>&amp;</code>，使用时添加<code>&amp;</code>表示取地址，引用和原始变量指向同一地址，所以通过引用也可以修改原始变量中所存储的数据；</p></li><li><p>如果读者不希望通过引用来修改原始的数据，那么可以在定义时添加 const 限制，形式为：</p><p><code>const type &amp;name = value;</code>  也可以是：<code>type const &amp;name = value;</code></p><p>这种引用方式为<strong>常引用</strong>；（即平时写cmp函数中形参的形式）；</p></li></ul><hr><ul><li><p>指针：是一个变量，其值为另一个变量的地址，即，内存位置的直接地址；</p></li><li><p>接口（抽象类）：如果类中至少有一个函数被声明为纯虚函数（没有具体实现的虚函数），则这个类就是抽象类。设计抽象类（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类；</p></li><li><p><strong>数据封装</strong>是一种把数据和操作数据的函数捆绑在一起的机制，<strong>数据抽象</strong>是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制；C++ 通过创建<strong>类</strong>来支持封装和数据隐藏；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2758 编辑距离</title>
      <link href="/2021/09/06/luo-gu-p2758-bian-ji-ju-chi/"/>
      <url>/2021/09/06/luo-gu-p2758-bian-ji-ju-chi/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P2758">P2758 编辑距离 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p><code>f[i][j]</code>表示将A[0 ~ i-1]转换为B[0 ~ j-1]所需的最小操作数，该题重点为状态转移方程：</p><p>1.删除一个字符：<code>f[i][j]=f[i-1][j]+1</code>，A删去一个字符后，i对应变成i-1，该串转换后与B匹配即可；</p><p>2.插入一个字符：<code>f[i][j]=f[i][j-1]+1</code>，此时只需A匹配到B的j-1，然后插入j位置对应的字符即可；</p><p>3.替换一个字符：<code>f[i][j]=f[i-1][j-1]+1</code>，易理解；</p><p>此外，若<code>A[i-1]==B[j-1]</code>，则最后一个字母直接匹配，易知<code>f[i][j]=f[i-1][j-1]</code>是最优情况；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> l1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> l2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> l2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>  f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">[</span>l2<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构知识总结</title>
      <link href="/2021/09/06/shu-ju-jie-gou-zhi-shi-zong-jie/"/>
      <url>/2021/09/06/shu-ju-jie-gou-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>数据结构包括逻辑结构、存储结构和数据的运算；</p></li><li><p>KMP算法</p></li><li><p>哈夫曼树：树中所有叶结点的带权路径长度（路径长度*结点权值）之和称为树的带权路径长度WPL，带权路径长度最小的二叉树称为哈夫曼树。</p></li><li><p>哈夫曼编码：一种前缀编码，将字频作为权重建哈夫曼树，其中连接左孩子的边表示0，连接右孩子的边表示1，一个字符从根到该节点的路径对应的编码就是其哈夫曼编码；它是使总长度最短的二进制前缀编码；</p></li></ul><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><ul><li>又称多路平衡查找树，所有节点的孩子个数最大值称为B树的阶，用m表示；</li><li>每个节点至多有m棵子树、m-1个关键字；</li><li>若根结点不是终端节点，则至少有两棵子树；</li><li>其他非叶节点至少有⌈m/2⌉棵子树，至少含⌈m/2⌉-1个关键字（记法：关键字相关的都减一，所有界都是上界）；</li><li>相邻关键字之间的指针指向的子树中的值都在这两个关键字之间；</li><li>所有的叶节点出现在同一层次上且不带信息（外部结点）；</li><li>查找：找到某个节点后，先在有序表中查找，找到则查找成功，否则到子树中查找；查找到叶节点时查找失败；</li><li>插入：查找到查找失败的叶节点，就确定了最底层非叶节点的插入位置；若插入后的节点关键字个数大于m-1，则对节点进行分裂，取一个新节点，在插入后的原节点从中间位置将关键字分为两部分，左部分关键字放原节点，右部分放新节点，中间位置节点插入原节点的父节点；可能需对父节点继续分裂；分裂到根结点则B树高度加一；</li><li>删除：若被删关键字k不在终端节点，用k的前驱或后继k’替代k，在相应节点中删除k’，k’必在终端节点，转化为被删关键字在终端节点的情形；终端节点若直接删除节点后关键字个数小于⌈m/2⌉-1，且其左或右兄弟的关键字个数大于⌈m/2⌉，则需调整该对兄弟节点和父节点以达到新平衡；若兄弟不够借，则将关键字删除后与左或右兄弟节点及双亲结点中的关键字合并；若双亲不是根结点且关键字个数减少后也不足，则对其继续执行上述操作；若双亲结点为根结点且关键字减少至0个，则删除根节点并合并新的节点为根；</li></ul><h3 id="B-树与B树的不同之处"><a href="#B-树与B树的不同之处" class="headerlink" title="B+树与B树的不同之处"></a>B+树与B树的不同之处</h3><ul><li>子树个数和关键字个数相等，非根结点的分支结点至少有⌈m/2⌉棵子树；</li><li>叶节点包含全部关键字和指向相应记录的指针，关键字按大小顺序排列，且相邻叶节点互相链接；</li><li>分支结点仅包含子节点中关键字的最大值及指向子节点的指针（相当于索引，而B树中父节点和子节点中的值不同）；</li><li>查询不同，B树在找到具体的数值以后，则结束，而B+树则需要通过索引找到叶子结点中的数据才结束，也就是说B+树的搜索过程中走了一条从根结点到叶子结点的路径。</li></ul><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><ul><li>散列函数的构造方法<ul><li>直接定址法 H(key)=key 或 H(key)=a*key+b;</li><li>除留余数法 H(key)=key%p;</li><li>数字分析法：取某些分布均匀的位作为散列地址；</li><li>平方取中法：取关键字的平方值的中间几位作为散列地址；</li></ul></li><li>处理冲突的方法<ul><li>开放定址法<ul><li>线性探测法：冲突时顺序查看下一个单元；</li><li>平方探测法：0^2, 1^2, -1^2, 2^2, -2^2 …, k^2, -k^2.</li><li>再散列法</li><li>伪随机序列法</li></ul></li><li>拉链法</li></ul></li></ul><h3 id="二叉树和度为二的树"><a href="#二叉树和度为二的树" class="headerlink" title="二叉树和度为二的树"></a>二叉树和度为二的树</h3><p>1、度不同</p><p>度为2的树要求每个节点最多只能有两棵子树，并且至少有一个节点有两棵子树。二叉树的要求是度不超过2，节点最多有两个叉，可以是1或者0。</p><p>2、分支不同</p><p>度为2的树有两个分支，但分支没有左右之分；<br>一棵二叉树也有两个分支，但有左右之分，左右子树的次序不能随意颠倒。</p><p>3、次序不同</p><p>度为2的树从形式上看与二叉树很相似，但它的子树是无序的，而二叉树是有序的。即，在一般树中若某结点只有一个孩子，就无需区分其左右次序，而在二叉树中即使是一个孩子也有左右之分。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>排序分为内部排序和外部排序，外部排序仅有多路归并排序；</li><li>内部排序包括插入排序（直接插入排序、折半插入排序、希尔排序）、交换排序（冒泡排序、<strong>快速排序</strong>）、选择排序（简单选择排序、堆排序）、归并排序和基数排序；</li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li>直接插入排序：每次将下一个记录插入前面的有序序列的合适位置，稳定；</li><li>折半插入排序：查找合适位置的过程用折半查找优化，稳定；</li><li>希尔排序：取小于n的步长d1，把表中记录分为d1组，距离为d1的倍数的记录放在同一组，在各组内进行直接插入排序；然后取第二个步长d2&lt;d1，重复直至dt=1。希尔的方法是d<del>1</del>=n/2，d<del>i+1</del>=⌊d<del>i</del>/2⌋。不稳定，相同值在不同组中，相对位置可能变化；</li></ul><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><ul><li>冒泡排序：稳定；</li><li>快速排序<ul><li>任取元素pivot（通常取首元素）作为枢轴，通过一趟排序将待排序表划分为独立的两部分，前一子表的所有元素小于pivot，后一子表的大于等于pivot，则pivot放在了其最终位置上，称为一次划分；递归地对两个子表重复上述过程，直至每部分内只有一个元素或为空为止；</li><li>空间复杂度：递归算法需递归工作栈，最好情况下为O(log n)；最坏情况O(n)，平均O(log n)；</li><li>时间复杂度：最坏情况（基本有序或基本逆序）O(n^2)，最好和平均情况O(n log n)，其中每次将所有组作一次划分用O(n)，递归层数为n或log n；</li><li>不稳定，若右端区间有两个关键字相同，且均小于基准值，则交换到左端区间后，相对位置改变；</li></ul></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li><p>简单选择排序：第i趟排序即从L[i…n]中选择关键字最小的元素与L(i)交换，时间复杂度始终O(n^2)；<strong>不稳定</strong>：在第i趟找到最小元素后，和第 i 个元素交换，可能导致第i个元素与其含有相同关键字的元素的相对位置发生改变；</p></li><li><p>堆排序</p><ul><li><p>堆：n个关键字序列L[1…n]称为堆，当且仅当 </p><p>1.L(i)&gt;=L(2i)且L(i)&gt;=L(2i+1) 或</p><p>2.L(i)&lt;=L(2i)且L(i)&lt;=L(2i+1) </p></li><li><p>构造初始堆：对n个节点的完全二叉树，最后一个非叶子节点是第⌊n/2⌋个节点（取下界是因为叶子结点比非叶结点多1），对它作下筛，使该子树成为堆，之后依次向前对各节点下筛；对于大根堆，筛选就是若该节点值不大于其左右子节点的值，就将左右子节点中的较大值与之交换，然后对交换后的子节点重复以上操作直至构成堆；关键字总比较次数不超过4n，时间复杂度O(n)；</p></li><li><p>堆排序算法：重复n-1次以下操作：将堆顶元素输出并与堆底元素交换，剔除出堆，再对新堆顶作下筛，把剩余i-1个元素整理成堆；</p></li><li><p>堆的插入操作：将新节点放在堆的末尾，对新节点执行上筛操作；</p></li><li><p>适合关键字较多的情况，不用同时读入所有数，如在1亿个数中选前100最大值，只需使用大小为100的<strong>小根堆</strong>，读入前100个数，然后依次读余下的数，如果小于堆顶则舍弃，否则<strong>取代</strong>堆顶并重新调整堆，最后堆中的100个数即为所求；</p></li><li><p>空间复杂度O(1)</p></li><li><p>时间复杂度：建堆O(n)，排序时n-1次向下调整，每次O(h)，即O(log n)，故复杂度总为O(n log n)；</p></li><li><p>不稳定：筛选时，有可能把后面相同关键字元素移到前面；</p></li></ul></li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul><li>将待排序表视为n个有序的子表，每个长度为1，然后反复执行两两归并，直至合并成长度为n的有序表为止；</li><li>空间复杂度：辅助空间为n个单元，O(n);</li><li>时间复杂度：每趟归并O(n)，共log n 趟归并，故为O(n log n)；</li><li>稳定；</li></ul><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><ul><li><p>使用r个队列，将每个元素按其值依次放入相应队列中，然后各队列节点依次收尾相接；从最低位到最高位依次执行此操作；</p></li><li><p>空间复杂度O(r)，r个队头队尾指针；时间复杂度O(d(n+r))，其中d为趟数，一趟分配O(n)，一趟收集O(r)；</p></li><li><p>稳定；</p></li></ul><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><ul><li>自平衡二叉查找树，在执行插入和删除操作时通过特定操作保持树的平衡，在O(log n)时间内做查找、插入和删除；</li><li>性质：<ul><li>结点是红色或黑色；</li><li>根结点是黑色；</li><li>所有叶子结点是黑色（叶子是NIL结点）；</li><li>每个红色结点的两个子节点都是黑色（即每个叶子到根的所有路径上不能有两个连续的红色结点）；</li><li>从任意节点到叶子结点的所有路径都包含相同数目的黑色结点；</li></ul></li><li>关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识总结</title>
      <link href="/2021/09/06/shu-ju-ku-zhi-shi-zong-jie/"/>
      <url>/2021/09/06/shu-ju-ku-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>数据库系统的组成成分：数据库(DB)、数据库管理系统(DBMS)、数据库应用程序(Database Application)；</p><ul><li>数据库管理系统：是位于用户与操作系统之间的一层数据管理软件；</li></ul></li><li><p>关系型数据库：指采用了关系模型来组织数据的数据库，其以行和列的形式存储数据，以便于用户理解，关系型数据库这一系列的行和列被称为表，一组表组成了数据库。用户通过查询来检索数据库中的数据，而查询是一个用于限定数据库中某些区域的执行代码。关系模型可以简单理解为二维表格模型，而一个关系型数据库就是由二维表及其之间的关系组成的一个数据组织；</p></li><li><p>关系上的约束：</p><ul><li>引用完整性约束：某个上下文中出现的值也必须在另一个相关的上下文中出现；</li><li>键约束：没有任何两个元组在该分量上有相同的值；</li><li>域约束…</li></ul></li><li><p>依赖：可能会导致问题</p><ul><li>函数依赖：如果R的两个元组在属性A<del>1</del>，A<del>2</del>,A<del>3</del>…,A<del>n</del>上一致，那么他们必定在属性B1，B2，…,Bn上也一致；</li></ul></li><li><p>键：这些属性函数决定关系的其他属性；键必须是最小的；</p></li><li><p>异常：可通过分解关系的方法消除</p><ul><li>冗余：信息没有必要地在多个元组中重复；</li><li>更新异常：修改了某个元组的信息，但没有改变其他元组的相同信息；</li><li>删除异常：删除时带来意料外的其他信息的丢失；</li></ul></li><li><p>弱实体集：弱实体集的键是由另一些实体集的部分或全部属性以及零个或多个自己的属性构成（支持联系、支持实体集）；</p></li><li><p>存储过程：一些预编译的SQL语句，是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了；</p></li><li><p>索引：索引是对数据库表中一或多个属性的值进行排序的结构，提高查询和连接的效率，降低增删改的效率；</p></li><li><p>事务：事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性；</p></li><li><p>事务所解决的问题是<strong>可串行化和原子性</strong>；一个特定事务必须对别的事务是<strong>可串行化</strong>的，即表现得好像串行执行，一个时刻只有一个事务，相互之间没有重叠；</p></li><li><p>乐观锁、悲观锁：即乐观并发控制和悲观并发控制；</p><ul><li>乐观锁：假设不会发生<strong>并发冲突</strong>，只在<strong>提交</strong>操作时检查是否违反<strong>数据完整性</strong>；</li><li>悲观锁：假定会发生<strong>并发冲突</strong>，屏蔽一切可能违反<strong>数据完整性</strong>的操作；</li></ul></li><li><p>共享锁（S锁）：共享 (S) 用于不更改或不更新数据的操作（只读操作），如 SELECT 语句。如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据；</p></li><li><p>排他锁（Exclusive Locks，简称X锁）：又称为写锁、独占锁。若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁。这就保证了其他事务在T释放A上的锁之前不能再读取和修改A；</p></li><li><p>键</p><ul><li>超键：在关系中能唯一标识元组的属性集称为关系模式的超键，包含候选键和主键；</li><li>候选键：是最小超键，即没有冗余元素的超键；</li><li>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失；</li><li>外键：在一个表中存在的另一个表的主键称此表的外键；</li></ul></li><li><p>视图：一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作；视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据相比多表查询更容易；</p></li><li><p>脏读：是指一个事务在处理数据的过程中，读取到另一个未提交事务所写的数据；</p></li><li><p>不可重复读：是指对于数据库中的某个数据，一个事务范围内的多次查询却返回了不同的结果，这是由于在查询过程中，数据被另外一个事务修改并提交了；</p></li><li><p>四种隔离级别</p><ul><li><p>读未提交（Read uncommitted）：可“读脏 ”。这是并发最高，一致性最差的隔离级别；</p></li><li><p>读已提交（Read committed）：可避免 脏读 的发生，但允许事务多次发出同一个查询并得到不同的答案，只要答案反映了已提交事务写入的数据。</p></li><li><p>可重复读（Repeatable read）：如果第一次检索到一个元组，那么可以确信重复这个查询时会再次检索到同一元组，但有可能检索到幻象（phantom）元组，幻象元组是该事务执行时数据库插入操作带来的元组；（即保证后序的检索结果只会增加不会减少）</p></li><li><p>串行化（Serializable ）：可避免 脏读、不可重复读、幻读 的发生。</p></li><li><p>以上四种隔离级别最高的是 <strong>Serializable</strong> 级别，最低的是 <em><strong>Read uncommitted</strong></em> 级别，当然级别越高，执行效率就越低；</p></li></ul></li><li><p>外键约束（引用完整性）：引用另一个关系（也可以是同一个关系）的属性（组），被引用的关系在其关系中必须被声明为 UNIQUE 或 PRIMARY KEY ；在第一个关系中出现的外键值，也必须在被引用关系的某个元组的属性中出现；</p><ul><li>维护引用完整性：缺省原则：拒绝违法更新、级联原则、置空值原则；</li></ul></li></ul><h3 id="关系型数据库的常见设计范式"><a href="#关系型数据库的常见设计范式" class="headerlink" title="关系型数据库的常见设计范式"></a>关系型数据库的常见设计范式</h3><p>参考资料：<a href="https://www.zhihu.com/question/24696366/answer/29189700#!">如何理解关系型数据库的常见设计范式？ - 知乎 (zhihu.com)</a></p><ul><li><p>范式（NF）指符合某一种级别的<strong>关系模式</strong>的集合，表示一个关系内部各属性之间的联系的<strong>合理化程度</strong>；</p></li><li><p>“关系模式”和“关系”可以理解为“类”和“对象”之间的关系；“关系”是一张带数据的表，是关系模式的一个实例，“关系模式”是该数据表的表结构；</p></li><li><p>分为1NF，2NF，3NF，BCNF等，符合高一级范式的设计，必定符合低一级范式；</p></li><li><p>第一范式（1NF）</p><ul><li>定义：符合1NF的关系中的每个属性都不可再分；</li><li>下表不符合1NF；</li></ul><p><img src="F:\blog\source\pics\数据库知识总结\24afd11455ac34a280fa83e4e8d75ccc_720w.png" alt="24afd11455ac34a280fa83e4e8d75ccc_720w"></p><ul><li>下表为其更正；</li></ul><p><img src="F:\blog\source\pics\数据库知识总结\6b735fb9503b0930e741faa474fed28e_720w.png" alt="6b735fb9503b0930e741faa474fed28e_720w"></p><ul><li>存在问题：数据冗余过大、插入异常、删除异常、修改异常等，如下图；</li></ul><p><img src="F:\blog\source\pics\数据库知识总结\5b16f655b57a957bfa340d0a996a0eea_720w.jpg" alt="5b16f655b57a957bfa340d0a996a0eea_720w"></p><ul><li>插入异常指：新建了一个系，但是暂时还没有招收任何学生，那么是无法将系名与系主任的数据单独地添加到数据表中；</li><li>删除异常指：假如将某个系中所有学生相关的记录都删除，那么所有系与系主任的数据也就随之消失了；</li><li>修改异常指：假如李小明转系到法律系，那么为了保证数据库中数据的一致性，需要修改三条记录中系与系主任的数据；</li></ul></li></ul><ul><li>第二范式（2NF）<ul><li>定义：每个表必须有主键,其他数据元素与主键一一对应。（简单地说，第二范式要求每个非主属性完全依赖于主键，而不是仅依赖于其中一部分属性，部分依赖）</li><li>主关键字（主键）可以由一个或多个字段组成；</li></ul></li></ul><ul><li>第三范式（3NF）<ul><li>定义：只要A1,A2,A3,…,An-&gt;B1,B2,B3,…,Bm是<strong>非平凡FD</strong>，那么或者｛A1,A2,A3,…,An｝是超键，或者每个属于B但不属于A的属性都是某个键的成员（主属性）；</li><li>或：对于每个非平凡FD，或者其左边是超键，或者其右边仅由主属性构成；</li><li>指表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系。也就是说，<strong>对于一个满足2NF 的数据结构来说，表中有可能存在某些数据元素依赖于其他非键数据元素的现象,必须消除</strong>，或者说是消除了非主属性对于码的传递函数依赖。</li></ul></li></ul><ul><li>BCNF<ul><li>定义：关系的每个<strong>非平凡FD</strong>的左边都必须是超键；</li><li>在 3NF 的基础上消除<strong>主属性</strong>对于码的部分与传递函数依赖。</li></ul></li></ul><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ul><li>即数据库事务正确执行的四个基本要素的缩写；</li><li>原子性（atomicity）、一致性（consistency）、隔离性（isolation）、持久性（durability）；</li><li>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样；</li><li>一致性：在事务开始之前和事务结束以后，数据库的<strong>完整性</strong>没有被破坏。这表示写入的数据必须完全符合所有的预设规则；</li><li>隔离性：数据库允许多个并发事务同时对其数据进行读写的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）；</li><li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识总结</title>
      <link href="/2021/09/06/ji-suan-ji-wang-luo-zhi-shi-zong-jie/"/>
      <url>/2021/09/06/ji-suan-ji-wang-luo-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="距离-向量路由算法"><a href="#距离-向量路由算法" class="headerlink" title="距离-向量路由算法"></a>距离-向量路由算法</h3><ul><li>所有节点定期将其整个路由表传送给所有与之直接相邻的节点；</li><li>路由选择表包含：每条路径的目的地、路径的代价（距离）；</li><li>更新路由选择表的情况：被通告一条新的路由；有更短距离的路由；</li><li>RIP算法是常见的距离-向量路由算法；</li></ul><h3 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h3><ul><li>要求每个节点具有完全的网络拓扑信息；</li><li>执行的任务：主动测试所有邻接节点的状态；定期将与相邻路由器的链路状态传播给所有其他节点；</li><li>只有当链路状态变化时，才用洪泛法向所有路由器发送消息；</li><li>典型的算法是OSPF算法；</li></ul><h3 id="IPV4地址"><a href="#IPV4地址" class="headerlink" title="IPV4地址"></a>IPV4地址</h3><ul><li>32比特，分为ABCDE五类，均由网络号和主机号组成；</li><li>A类：前八位为网络号，第一位为0，前八位范围1-126（即后七位不为全零不为全一）；</li><li>B类：前16位为网络号，前两位为10，前八位范围128-191（即后六位为全零到全一）；</li><li>C类：前24位为网络号，前三位为110，192-223（即后五位为全零到全一）；</li><li>D类：前四位为1110，224-239（即后四位为全零到全一），多播地址；</li><li>E类：前四位为1111，240-255（即后四位为全零到全一），保留为今后使用；</li><li>不可用地址：A类地址中，网络号字段全零的为保留地址，127为环回自检地址；B类中128.0不可指派，C类中192.0.0不可指派；</li></ul><ul><li><p><strong>网络地址转换（NAT）</strong>是指通过将专用网络地址转换为公用网络地址，从而对外隐藏内部管理的IP地址；</p></li><li><p><strong>无分类域间路由选择（CIDR）</strong>，基于可变长子网掩码来进行任意长度的前缀的分配的，前缀表示网络号，后面是主机号；</p></li><li><p><strong>地址解析协议（ARP）</strong>完成IP地址到MAC地址的映射； </p></li><li><p><strong>动态主机配置协议（DHCP）</strong>给主机动态地分配IP地址，提供即插即用的联网机制，采用UDP；</p></li><li><p><strong>网际控制报文协议（ICMP）</strong>报文分为ICMP差错报告报文和ICMP询问报文，应用：PING；</p></li></ul><h3 id="路由信息协议（RIP）"><a href="#路由信息协议（RIP）" class="headerlink" title="路由信息协议（RIP）"></a>路由信息协议（RIP）</h3><ul><li>内部网关协议（IGP）；</li><li>每个路由器维护自身到其他每个目的网络的距离记录（距离向量）；</li><li>优先选择跳数少的路径；</li><li>最多允许15跳，防止数据报不断循环在环路上，减少网络拥塞的可能性；</li><li>任意两个相邻路由器每30秒广播一次RIP路由更新信息；</li></ul><h4 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h4><ul><li>对地址为X的相邻路由器发来的RIP报文，将“下一跳”改为X，“距离”加一；</li><li>对修改后的每个项目：<ul><li>当原路由表无目的网络N时，添加项目；</li><li>当有N且下一跳为X时，新项目替换原项目；</li><li>当有N且下一跳不为X，如果新距离d小于原距离，就替换原项目；</li></ul></li><li>如果180秒未收到相邻路由器的更新路由表，将该路由器记为不可达路由器，即距离设为16。</li></ul><h3 id="开放最短路径优先（OSPF）协议"><a href="#开放最短路径优先（OSPF）协议" class="headerlink" title="开放最短路径优先（OSPF）协议"></a>开放最短路径优先（OSPF）协议</h3><ul><li>内部网关协议（IGP）；</li><li>基本同“链路状态路由算法”；</li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><ul><li>提供应用进程之间的逻辑通信（端到端的通信）；</li><li>复用和分用，发送方不同应用进程可使用同一传输层协议传送数据；接收方的传输层在剥去报文首部后能将数据正确交付到目的应用程序；</li><li>差错检测；</li><li>套接字Socket=(IP地址：端口号)</li><li>TCP的应用：文件传输协议FTP、超文本传输协议HTTP、远程登录TELNET；</li><li>UDP的应用：小文件传送协议TFTP、域名系统DNS；</li></ul><h3 id="用户数据报协议UDP"><a href="#用户数据报协议UDP" class="headerlink" title="用户数据报协议UDP"></a>用户数据报协议UDP</h3><ul><li><p>仅在IP的数据报服务之上增加了复用和分用以及差错检测；</p></li><li><p>面向报文，只添加首部就向下交付给IP层，一次发送一个报文，不合并不拆分；</p></li><li><p>优点：</p><ul><li>无需建立连接，不引入建立连接时延；</li><li>无连接状态，端系统不需维护连接状态，能支持更多活动客户机；</li><li>分组首部开销小，TCP有20B，UDP仅8B；</li><li>应用层能更好地控制发送的数据和发送时间，无拥塞控制，因此网络中的拥塞不会影响主机的发送效率，有利于实时应用；</li><li>支持一对一、一对多、多对一、多对多的交互通信；</li></ul></li><li><p>首部：源端口16位（复用）+目的端口16位（分用）+长度16位+校验和16位（差错检测）；</p></li><li><p>数据单元称为数据报；</p></li></ul><h3 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h3><ul><li>面向连接的传输层协议；</li><li>每条TCP连接是点对点（一对一）的；</li><li>提供可靠的交付服务，保证传送的数据无差错、不丢失、不重复且有序；</li><li>提供全双工通信，设有发送缓存和接收缓存；</li><li>面向字节流；</li><li>报文长度根据接收方给出的窗口值和当前网络拥塞程度决定；</li><li>传送的数据单元称为报文段；</li><li>客户/服务器方式；</li><li>TCP连接的建立（三次握手）：客户机：连接请求报文段：同步位SYN=1，初始序号seq=x; 服务器：确认报文段：SYN=1，确认位ACK=1，seq=y，确认号ack=x+1，<strong>为该TCP连接分配缓存和变量</strong>； 客户机：确认报文段：ACK=1，seq=x+1,ack=y+1，<strong>为该连接分配缓存和变量</strong>;</li><li>TCP连接的释放（四次握手）：客户机连接释放报文段：终止位FIN=1，seq=u，<strong>停止发送数据，主动关闭TCP连接</strong>; 服务器确认：ACK=1，seq=v,ack=u+1，<strong>客户机到服务器方向连接释放</strong>；服务器连接释放报文段：FIN=1,ACK=1,<strong>seq=w</strong>,ack=u+1; 客户机确认报文段：ACK=1，seq=u+1，ack=w+1，<strong>等待2MSL（最长报文段寿命），客户机进入CLOSED状态</strong>；</li><li>TCP可靠传输<ul><li>序号：按字节编号  确认：期望收到的下一个报文段数据的第一个字节序号；</li><li>重传：超时和冗余ACK导致重传；<ul><li>超时：TCP每发送一个报文段，就对这个报文段设置一次计时器；到期但未收到确认时重传该报文段；</li><li>冗余ACK：每当比期望序号大的失序报文段到达时，发送一个冗余ACK，发送方收到对同一个报文段的3个冗余ACK时重传；</li></ul></li></ul></li><li>TCP流量控制：<ul><li>接收方根据自己接收缓存的大小，通过设置确认报文段首部的窗口字段来将rwnd（接收窗口）通知给发送方；</li><li>发送方根据对当前网络拥塞程度的估计确定拥塞窗口cwnd，cwnd在拥塞控制中设置；</li><li>发送窗口的实际大小取min(rwnd,cwnd);</li></ul></li><li>TCP拥塞控制（设置cwnd）<ul><li>慢开始算法：先令cwnd=1，每收到一个对新报文段的确认后，将cwnd加1。如此每经过一个RTT，cwnd加倍，直到cwnd增大到慢开始门限ssthresh（不能越过），改用拥塞避免算法；</li><li>拥塞避免算法：每经过一个RTT将cwnd加1而不是加倍。</li><li>网络拥塞的处理：把慢开始门限ssthresh设为出现拥塞时cwnd的一半，然后置cwnd=1，执行慢开始算法；</li><li>快重传和快恢复算法是对慢开始和拥塞避免算法的改进；</li><li>快重传：当发送方连续收到三个冗余ACK报文时，直接重传对方未收到的报文段，而不必等待重传计时器超时；</li><li>快恢复：发送方连续收到三个冗余ACK时，将ssthresh设置为当前cwnd的一半，且由于认为网络很可能没有发生严重拥塞，将cwnd设置为ssthresh改变后的数值，并开始执行拥塞避免算法；</li><li>总结：在TCP连接建立和网络出现超时时，采用慢开始和拥塞避免算法；发送方接收到冗余ACK时，采用快重传和快恢复算法；</li></ul></li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="域名系统（Domain-Name-System）"><a href="#域名系统（Domain-Name-System）" class="headerlink" title="域名系统（Domain Name System）"></a>域名系统（Domain Name System）</h3><ul><li>运行在UDP上，使用53号端口；</li><li>概念上将DNS分为3部分：层次域名空间、域名服务器、解析器；</li><li>域名解析过程<ul><li>把域名映射成IP地址或把IP地址映射成域名的过程；</li><li>分为递归查询和递归与迭代相结合的查询；</li><li>递归查询：本地域名服务器向根域名服务器查询一次，然后根域名服务器查询顶级域名服务器，顶级域名服务器查询权限域名服务器等，最后原路返回；给根域名服务器造成的负载过大；</li><li>递归与迭代相结合的查询：主机向本地域名服务器查询采用递归查询，本地域名服务器向根域名服务器的查询采用迭代查询；</li></ul></li></ul><h3 id="文件传输协议（FTP）"><a href="#文件传输协议（FTP）" class="headerlink" title="文件传输协议（FTP）"></a>文件传输协议（FTP）</h3><ul><li>使用两个并行的TCP连接：控制连接（端口号21）和数据连接（端口号20）；</li><li>服务器监听21号端口，等待客户连接，建立在该端口上的连接为控制连接，传输控制信息，控制连接在整个会话期间一直保持打开状态；</li><li>服务器端收到文件传输请求，创建“数据传送进程”和“数据连接”，传送完毕后关闭“数据传送连接”并结束运行；</li><li>数据连接有两种传输模式：主动模式PORT和被动模式PASV；</li></ul><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><ul><li>组成构建：用户代理（Outlook、Foxmail等）、邮件服务器、协议；</li><li>邮件发送协议用于用户代理向邮件服务器或邮件服务器之间发送邮件，如SMTP；</li><li>邮件读取协议用于用户代理从邮件服务器读取邮件，如POP3；</li><li>发送方式：用户代理—-SMTP—-&gt;发送端邮件服务器—-SMTP—-&gt;接收端邮件服务器    收信人&lt;—-POP3—-接收端邮件服务器；</li></ul><h3 id="超文本传输协议（HTTP）"><a href="#超文本传输协议（HTTP）" class="headerlink" title="超文本传输协议（HTTP）"></a>超文本传输协议（HTTP）</h3><ul><li><p>用户单击鼠标后发生的事件</p><ul><li>浏览器分析链接指向页面的URL（统一资源定位符）（<a href="http://www.tsinghua.edu.cn/chn/index.htm%EF%BC%89%EF%BC%9B">http://www.tsinghua.edu.cn/chn/index.htm）；</a></li><li>浏览器向DNS请求解析 <a href="http://www.tsinghua.edu.cn/">www.tsinghua.edu.cn</a> 的IP地址；</li><li>域名系统DNS解析出清华大学服务器的IP地址；</li><li>浏览器与该服务器建立TCP连接（HTTP的默认端口号80）；</li><li>浏览器发出HTTP请求： GET /chn/index.htm；</li><li>服务器通过HTTP响应把文件 index.htm 发送给浏览器；</li><li>释放TCP连接；</li><li>浏览器解释文件 index.htm ，并将Web页显示给用户；</li></ul></li><li><p>特点：HTTP本身是无连接的；无状态的；即可以使用非持久连接，也可以使用持久连接（HTTP/1.1 支持）；</p></li></ul><h3 id="常见应用层协议小结"><a href="#常见应用层协议小结" class="headerlink" title="常见应用层协议小结"></a>常见应用层协议小结</h3><table><thead><tr><th>应用程序</th><th align="left">FTP数据连接</th><th>FTP控制连接</th><th>TELNET</th><th>SMTP</th><th align="left">DNS</th><th>TFTP</th><th>HTTP</th><th>POP3</th><th>SNMP</th></tr></thead><tbody><tr><td>使用协议</td><td align="left">TCP</td><td>TCP</td><td>TCP</td><td>TCP</td><td align="left">UDP</td><td>UDP</td><td>TCP</td><td>TCP</td><td>UDP</td></tr><tr><td>熟知端口号</td><td align="left">20</td><td>21</td><td>23</td><td>25</td><td align="left">53</td><td>69</td><td>80</td><td>110</td><td>161</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P3397 地毯</title>
      <link href="/2021/09/03/luo-gu-p3397-di-tan/"/>
      <url>/2021/09/03/luo-gu-p3397-di-tan/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P3397">P3397 地毯 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/8943"><strong>老K</strong></a>的题解。</p><p>差分主要用于优化区间编辑操作的时间。本题可用一维或二维差分做，一维就是将每一行作为一个单位，二维将整体作为一个单位。二维的优点在于，在输入地毯信息阶段，一维差分对每个地毯编辑的时间复杂度为O(x)，x为地毯在x维度的长度，而二维差分只需O(1)时间。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> diff<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//diff为差分数组，res为结果数组</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x1 <span class="token operator">&gt;&gt;</span> y1 <span class="token operator">&gt;&gt;</span> x2 <span class="token operator">&gt;&gt;</span> y2<span class="token punctuation">;</span>        <span class="token comment">//对diff[x][y]的编辑相当于对res[0][0]~res[x][y]的所有位置的编辑</span>diff<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>diff<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>diff<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>diff<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//恢复的公式如下，恢复res[i][j]要依赖res[i-1][j]、res[i][j-1]和res[i-1][j-1]</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> res<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1120 小木棍 ［数据加强版］</title>
      <link href="/2021/09/03/luo-gu-p1120-xiao-mu-gun-shu-ju-jia-qiang-ban/"/>
      <url>/2021/09/03/luo-gu-p1120-xiao-mu-gun-shu-ju-jia-qiang-ban/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1120">P1120 小木棍 ［数据加强版］ - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>本题重点考查搜索的剪枝，我学习了<a href="https://www.luogu.com.cn/user/34031"><strong>Kaori</strong></a>的许多代码优化思路，收益匪浅，对dalao表示感谢！</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>s<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>len<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dfs的参数fin为当前已经拼好的木棍根数，为的是将所有木棍纳入该dfs中，当拼接失败时，可以回溯修改前面已经拼好的木棍</span><span class="token comment">//如果去掉fin则回溯范围只在当前木棍内部，这是不对的</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> fin<span class="token punctuation">,</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> remain<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>remain <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fin <span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>fin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//二分查找，寻找下一个长度小于remain的木棍作为循环起点</span><span class="token keyword">int</span> l <span class="token operator">=</span> idx<span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//别写移位，写除号，因为加号优先级高于移位，容易漏括号（笑了</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> remain<span class="token punctuation">)</span> <span class="token punctuation">{</span>l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//tip: 在dfs中清空vis时，如果return true，该问题已解决，就不用清空vis了；而return false时由于需要继续回溯，就必须先把该层置vis的true都恢复为false。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>remain<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> remain <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//v[i]不能拼上时，引出下面两种关键剪枝：</span><span class="token comment">//remain==len时，说明此时放的是新木棍的第一根子木棍，此时一定应该放剩余子木棍中最长的，如果不能放则说明前面拼的已经错了，直接返回false</span><span class="token comment">//remain==v[i]时，将v[i]拼上是最优解，但最优解v[i]不能拼，则前面的一定拼错了，返回false</span><span class="token keyword">if</span> <span class="token punctuation">(</span>remain <span class="token operator">==</span> len<span class="token operator">||</span>remain<span class="token operator">==</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">+=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>s <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//nxt数组，用于在搜索时，如果一个长度填入时不能成功，就跳过相同长度的木棍，到下一个新的长度</span>nxt<span class="token punctuation">[</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> sum<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> l<span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> r<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//只找到最大值的1/2即可，此时能拼成两根木棍，如果失败则只可能拼成一根了</span><span class="token comment">//memset(vis, false, sizeof(vis)); //清空vis数组放在dfs的过程中，尽量不要反复用memset</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">%</span>len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>cnt <span class="token operator">=</span> sum <span class="token operator">/</span> len<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> dfs </tag>
            
            <tag> 搜索的剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1270 “访问”美术馆</title>
      <link href="/2021/09/03/luo-gu-p1270-fang-wen-mei-zhu-guan/"/>
      <url>/2021/09/03/luo-gu-p1270-fang-wen-mei-zhu-guan/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1270">P1270 “访问”美术馆 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>这道题的难点首先在于输入处理和树的结构的定义，其次是动态规划数组的定义和状态转移方程，最后还要用记忆化节约时间。代码参考<a href="https://www.luogu.com.cn/user/49655"><strong>橙子汁</strong></a>的题解。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span><span class="token keyword">int</span> cost<span class="token punctuation">,</span> pic<span class="token punctuation">;</span><span class="token comment">//cost为通向该节点的路往返所需的时间</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//f[i][j]表示以i为根的树（还没有算i节点的cost）用j时间最多偷的画数</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">&gt;&gt;</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>pic<span class="token punctuation">;</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>pic <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//由于下面的for循环可能需要访问f数组的同一位置多次，因此需要记忆化</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">||</span> t <span class="token operator">-</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>pic <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//叶子节点</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>pic<span class="token punctuation">,</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t <span class="token operator">-</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//非叶子结点，往两棵子树分配时间</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> u<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">-</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t <span class="token operator">-</span> tree<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>T<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//如果出门时警察到了，就被抓了，故时间减一</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树形dp </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P3177 [HAOI2015]树上染色</title>
      <link href="/2021/09/03/luo-gu-p3177-haoi2015-shu-shang-ran-se/"/>
      <url>/2021/09/03/luo-gu-p3177-haoi2015-shu-shang-ran-se/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P3177">P3177 HAOI2015树上染色 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>这是一道很硬的树上背包题，代码中有很多细节令我思考理解了很久，理解这道题会对熟练掌握树上背包有很大帮助。注释主要阐述细节，整体思路可参考<a href="https://www.luogu.com.cn/user/34530"><strong>子谦。</strong></a>的题解。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2005</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">toEdge</span> <span class="token punctuation">{</span>ll v<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>toEdge<span class="token operator">&gt;</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//f[i][j]表示以i为根的子树上，有j个黑点时的最大收益</span><span class="token comment">//返回值与背包的大小相关，本题中也就是子树的节点数</span>ll <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//没有考虑任何子树时，只有0或1个黑点是有效的，也就是根结点本身</span><span class="token comment">//if (adj[r].size() == 1 &amp;&amp; adj[r][0].v == fa) return 1; 没有必要特殊处理叶子节点</span>ll sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>adj<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>toEdge e <span class="token operator">=</span> adj<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>v <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>ll t <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>v<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">+=</span> t<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll v <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> v <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//正序循环的做法：最内层循环是循环组内的物品，因此正序逆序均可，这里用正序比较方便，但 subtask 1 会TLE，可能是为了让我们理解逆序的做法</span><span class="token comment">/*for (ll j = 0; j &lt;= t &amp;&amp; j &lt;= v; j++) { if (f[r][v - j] != -1) {ll w = e.w*(j*(k - j) + (t - j)*(n - k - t + j));f[r][v] = max(f[r][v], f[r][v - j] + f[e.v][j] + w);}}*/</span>                           <span class="token comment">//逆序循环的做法</span>            <span class="token comment">//首先，由于此时开始考虑一棵新的子树，由于最终我们必须考虑整个树，而不能抛弃某个子树，因此我们必须先把这棵子树的基础值赋给f[r][v]，否则f[r][v]就仍处于没有这棵子树的状态，是不对的。基础值可以是子树节点全白的状态，否则如果让j最后遍历到j==0是再考虑这个状态，就会导致当时的f[r][v]基础值已经变大，从而加上全白的情况时的结果也偏大。正序循环正确正是因为它先考虑了j==0.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>e<span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>k<span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">*</span>e<span class="token punctuation">.</span>w<span class="token punctuation">;</span> <span class="token comment">//只有在f[r][v]合法时才会考虑它，否则子树全白仍达不到合法状态</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>ll j<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     ll w <span class="token operator">=</span> e<span class="token punctuation">.</span>w<span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token punctuation">(</span>k <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n <span class="token operator">-</span> k <span class="token operator">-</span> t <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>v <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>e<span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> k <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> k <span class="token operator">=</span> n <span class="token operator">-</span> k<span class="token punctuation">;</span> <span class="token comment">//白点和黑点等价，节约时间</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> b<span class="token punctuation">,</span>c <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adj<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span>c <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为dp时可能遇到无效的f数组元素，所以先置-1标记</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树形dp </tag>
            
            <tag> 树上背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2585 [ZJOI2006]三色二叉树</title>
      <link href="/2021/09/01/luo-gu-p2585-zjoi2006-san-se-er-cha-shu/"/>
      <url>/2021/09/01/luo-gu-p2585-zjoi2006-san-se-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P2585">P2585 三色二叉树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a> 。</p><p>树状dp的模板题，参考<a href="https://www.luogu.com.cn/user/122144"><strong>hs_black</strong></a>的题解，该代码提供了一个清晰的思路，即对于节点的每一种可行的状态，都单独定义一个dp数组的维度，如本题中有三种颜色，就定义dp数组为<code>dp[maxn][3]</code>，将每个状态下的结果都记录下来，然后依规则作dp即可。思考量小且不易出错。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dp[root][i]为以root为根的子树，在root涂i(i==0为涂绿色，i==1或2为涂另外两色之一)色时绿色节点数的最大值，f为最小值</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> root <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> lchild <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> rchild <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>lchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>rchild<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s其实就是树的先序遍历，因此无需建树，用p指示当前遍历到哪个位置即可</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，<a href="https://leetcode-cn.com/problems/binary-tree-cameras/">968. 监控二叉树 - 力扣（LeetCode） (leetcode-cn.com)</a>应该也可以定义每个结点的三种状态为{放置了摄像头、被监控、未被监控}，将对应状态信息都在dp过程中记录下来，但这道题贪心的思路和代码更简洁，所以这里只是提供一种思路。</p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 树状dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1273 有线电视网</title>
      <link href="/2021/09/01/luo-gu-p1273-you-xian-dian-shi-wang/"/>
      <url>/2021/09/01/luo-gu-p1273-you-xian-dian-shi-wang/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1273">P1273 有线电视网 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>题解可以参考<a href="https://www.luogu.com.cn/user/85691"><strong>HY的小可爱</strong></a>，只要搞清这道题为什么是分组背包，再按照分组背包的模板就很容易理解了。指路<a href="https://lc--fairycastle.blog.luogu.org/solution-p1273">题解 P1273 【有线电视网】 - Fairycastle - 洛谷博客 (luogu.org)</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//dp[i][j]表示以i为根的子树服务j个观众时的最大收益</span><span class="token keyword">struct</span> <span class="token class-name">toEdge</span> <span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>toEdge<span class="token operator">&gt;</span> son<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//返回值为root为根的子树中观众的总数量，用于其父节点的剪枝</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//为叶子结点</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//分组背包，每棵子树为一个组，组的元素为服务x个观众(x∈[0,t])，背包容量sum，即为到当前子树为止的观众总数，更大的容量暂时不需考虑，因为用不到</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> v <span class="token operator">=</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> c <span class="token operator">=</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">+=</span> t<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这里其实可以从最大容量即m开始循环，但从sum开始起到了剪枝的作用，否则TLE</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这里也可以循环到j，这里只到t也是剪枝</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> j<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//剪枝</span>                dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> c1<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a1 <span class="token operator">&gt;&gt;</span> c1<span class="token punctuation">;</span>son<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a1<span class="token punctuation">,</span>c1 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//置负值的方法，只有在dp数组可能有负值的时候这样用</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相似题目：<a href="https://www.luogu.com.cn/problem/P2014">P2014 选课 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">310</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> son<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">treedp</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> nxt <span class="token operator">=</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">treedp</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span>t<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>t<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span>v<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//j最大只能为v-1，因为背包v中有一个必须是根结点</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>v <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token comment">//给森林添加一个根结点n+1成为一棵树</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>son<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>son<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">treedp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 树形dp </tag>
            
            <tag> 分组背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P4302 [SCOI2003]字符串折叠</title>
      <link href="/2021/08/31/luo-gu-p4302-scoi2003-zi-fu-chuan-zhe-die/"/>
      <url>/2021/08/31/luo-gu-p4302-scoi2003-zi-fu-chuan-zhe-die/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P4302">P4302 SCOI2003 字符串折叠 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。经典区间dp题，有很好的学习解题思路的作用！</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dp[i][j]表示s[i~j]的最小折叠长度，m为对应数字的位数</span><span class="token comment">//检查s[left~left-len+1]是否可以以p的长度作折叠</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token operator">%</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> p<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left<span class="token operator">+</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> p<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>m<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//区间dp，s[i~j]的最小长度可以由两个子区间的最小长度拼起来，也可以是折叠得到</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//拼接</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token comment">//折叠，最终s的每个子区间都会被检查每一种折叠方法是否更优，没有更优化的方法</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//第一次写时误将dp[i][i+p-1]写成p，用dp[i][i+p-1]可以实现嵌套的折叠而p不行</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> m<span class="token punctuation">[</span>l <span class="token operator">/</span> p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P5490 【模板】扫描线</title>
      <link href="/2021/08/30/luo-gu-p5490-mo-ban-sao-miao-xian/"/>
      <url>/2021/08/30/luo-gu-p5490-mo-ban-sao-miao-xian/</url>
      
        <content type="html"><![CDATA[<p> 参考<a href="https://www.luogu.com.cn/user/60258"><strong>NCC79601</strong></a>的题解。其中每个线段树节点表示一个x轴方向的区间，其属性len表示这个区间内当前被覆盖的总长度。有了根结点的len即总长度，再乘以y轴方向上当前边与其上方的边之间的距离Δy，就是当前扫描区域的面积。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> ll maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//这里不知道为什么要多开10倍</span>ll n<span class="token punctuation">,</span>X<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//X[]数组用于将横坐标离散化，否则1e9的坐标范围会MLE</span><span class="token comment">//存每一条水平边</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> mark<span class="token punctuation">;</span><span class="token comment">//矩形下方的边mark=1，上方的边mark=-1</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将边按照y坐标升序排序</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> edge <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> edge <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//线段树节点，其覆盖的横坐标范围为[X[l],X[r+1]]，sum表示该范围被完整覆盖的次数，len为该范围当前被覆盖的总长度</span><span class="token keyword">struct</span> <span class="token class-name">SegTree</span> <span class="token punctuation">{</span>ll l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span>tree<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> ll <span class="token function">ls</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> ll <span class="token function">rs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//建树</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//用于将子节点的len信息汇总给父节点</span><span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> X<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> X<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">edit_tree</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span> ll L<span class="token punctuation">,</span> ll R<span class="token punctuation">,</span> ll mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//当前区间被完整覆盖时，只需修改sum，并在push_up中修改len后return</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> X<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> X<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> mark<span class="token punctuation">;</span><span class="token function">push_up</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> X<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//先递归修改子节点</span><span class="token function">edit_tree</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>R <span class="token operator">&gt;</span> X<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">edit_tree</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> mark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push_up</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将子节点修改后的len汇总到本节点</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x1 <span class="token operator">&gt;&gt;</span> y1 <span class="token operator">&gt;&gt;</span> x2 <span class="token operator">&gt;&gt;</span> y2<span class="token punctuation">;</span>        <span class="token comment">//存edge信息和横坐标信息</span>e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x1 <span class="token operator">=</span> x1<span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x2 <span class="token operator">=</span> x2<span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y1<span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mark <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1 <span class="token operator">=</span> x1<span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2 <span class="token operator">=</span> x2<span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y2<span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>mark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>X<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x1<span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> x2<span class="token punctuation">;</span><span class="token punctuation">}</span>n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//方便后序处理</span><span class="token function">sort</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将边按y坐标升序排序</span>    <span class="token comment">//X坐标离散化，先排序再去重，tot为去重后的X[]最大下标</span><span class="token function">sort</span><span class="token punctuation">(</span>X <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> X <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll tot <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>X <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> X <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>X <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>tot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">edit_tree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">,</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span>res <span class="token operator">+=</span> tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token operator">*</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//len最终汇总到根结点</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 扫描线 </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P3373 【模板】线段树 2</title>
      <link href="/2021/08/30/luo-gu-p3373-mo-ban-xian-duan-shu-2/"/>
      <url>/2021/08/30/luo-gu-p3373-mo-ban-xian-duan-shu-2/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P3373">P3373 【模板】线段树 2 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。线段树是一种高级数据结构，它的区间操作、查询和单点操作、查询的时间复杂度为O(logn)。通过这道题，我们来学习线段树的写法。（参考<a href="https://www.luogu.com.cn/user/41707"><strong>zhuwanman</strong></a>的题解）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mod<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tag1<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tag2<span class="token punctuation">[</span>maxn <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//tag1为加法的lazy tag，tag2为乘法的</span><span class="token comment">//我们定义每次更新的顺序为先乘后加，即ans[i]=ans[i]*tag2[i]+tag1[i]</span><span class="token comment">//求左孩子下标</span><span class="token keyword">inline</span> ll <span class="token function">ls</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//求右孩子下标</span><span class="token keyword">inline</span> ll <span class="token function">rs</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//将孩子结点更新的结果向上更新到父结点</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push_up</span><span class="token punctuation">(</span>ll p<span class="token punctuation">)</span> <span class="token punctuation">{</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> ans<span class="token punctuation">[</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//建线段树</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push_up</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll k1<span class="token punctuation">,</span> ll k2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//按照先乘后加更新各域</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token operator">%</span>mod <span class="token operator">+</span> k1 <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token operator">%</span>mod <span class="token operator">+</span> k1<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span> <span class="token comment">//tag1表示需要加上的一个数，其优先级低于乘法，所以也要先乘后加</span>tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">*</span> k2<span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment">//tag2为需要乘的数，由于先乘后加，优先算tag2，所以它不受k1影响</span><span class="token punctuation">}</span><span class="token comment">//将本节点的lazy_tag存的信息推到孩子结点，清空本节点的lazy_tag</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">push_down</span><span class="token punctuation">(</span>ll p<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span>ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//区间加法的更新</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update1</span><span class="token punctuation">(</span>ll nl<span class="token punctuation">,</span> ll nr<span class="token punctuation">,</span> ll p<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> nr<span class="token punctuation">)</span> <span class="token punctuation">{</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">%</span> mod <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">push_down</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token function">update1</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token function">update1</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push_up</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//区间乘法的更新</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update2</span><span class="token punctuation">(</span>ll nl<span class="token punctuation">,</span> ll nr<span class="token punctuation">,</span> ll p<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">,</span> ll k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> nr<span class="token punctuation">)</span> <span class="token punctuation">{</span>ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token operator">%</span>mod<span class="token punctuation">;</span>tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tag1<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment">//如果之前tag1存了需要加的数a，这里乘k相当于p=(p+tag1[p])*k，根据分配律，p=p*k+tag1[p]*k，因此tag1也要乘k。</span>tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tag2<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">*</span> k<span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">push_down</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>ll mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nl <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token function">update2</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nr <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token function">update2</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push_up</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> ll <span class="token function">query</span><span class="token punctuation">(</span>ll ql<span class="token punctuation">,</span> ll qr<span class="token punctuation">,</span> ll p<span class="token punctuation">,</span> ll l<span class="token punctuation">,</span> ll r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ql <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;=</span> qr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ans<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">push_down</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>ll res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ql <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> <span class="token function">ls</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>qr <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> <span class="token function">query</span><span class="token punctuation">(</span>ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> <span class="token function">rs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> mod<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ll op<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span> <span class="token function">update2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span> <span class="token function">update1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">query</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣940. 不同的子序列 II</title>
      <link href="/2021/08/30/li-kou-940-bu-tong-de-zi-xu-lie-ii/"/>
      <url>/2021/08/30/li-kou-940-bu-tong-de-zi-xu-lie-ii/</url>
      
        <content type="html"><![CDATA[<h3 id="940-不同的子序列-II"><a href="#940-不同的子序列-II" class="headerlink" title="940. 不同的子序列 II"></a><a href="https://leetcode-cn.com/problems/distinct-subsequences-ii/">940. 不同的子序列 II</a></h3><p>Difficulty: <strong>困难</strong></p><p>给定一个字符串 <code>s</code>，计算 <code>s</code> 的 <strong>不同非空子序列</strong> 的个数。因为结果可能很大，所以返回答案需要对**<code>10^9 + 7</code> 取余** 。</p><p>字符串的 <strong>子序列</strong> 是经由原字符串删除一些（也可能不删除）字符但不改变剩余字符相对位置的一个新字符串。</p><ul><li>  例如，<code>"ace"</code> 是 <code>"_**a**_b_**c**_d_**e**_"</code> 的一个子序列，但 <code>"aec"</code> 不是。</li></ul><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s = "abc"输出：7解释：7 个不同的子序列分别是 "a", "b", "c", "ab", "ac", "bc", 以及 "abc"。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s = "aba"输出：6解释：6 个不同的子序列分别是 "a", "b", "ab", "ba", "aa" 以及 "aba"。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s = "aaa"输出：3解释：3 个不同的子序列分别是 "a", "aa" 以及 "aaa"。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>  <code>1 &lt;= s.length &lt;= 2000</code></li><li>  <code>s</code> 仅由小写英文字母组成</li></ul><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Language: ****</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1000000007</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last_pos<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//标记每个字母最后出现的位置</span>    <span class="token keyword">int</span> <span class="token function">distinctSubseqII</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//dp[i]表示包括空串在内，前i个字符组成的不同子序列数，dp[0]为一个空串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span> <span class="token comment">//dp[i]即在dp[i-1]的基础上可以加上下一个字符ch，从而让种类数翻倍</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last_pos<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果ch此前出现过，则所有dp[last_pos[ch]-1]中的子序列都不能再加ch了，否则就与dp[last_pos[ch]]中新增的子序列重复了，减去这些情况</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> MOD <span class="token operator">-</span> dp<span class="token punctuation">[</span>last_pos<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            last_pos<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最后减去空串</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2704 [NOI2001] 炮兵阵地</title>
      <link href="/2021/08/30/luo-gu-p2704-noi2001-pao-bing-zhen-di/"/>
      <url>/2021/08/30/luo-gu-p2704-noi2001-pao-bing-zhen-di/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P2704">P2704 NOI2001 炮兵阵地 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。本题是状态压缩动态规划的经典题目，看着<a href="https://www.luogu.com.cn/user/41262"><strong>SSHhh</strong></a>的题解打了两个小时，终于在把整体思路全部摸清并且对代码作了优化的情况下过了。其中每行的炮兵分布为一个状态，一个状态的二进制表示中，某一位为1，表示这个位置有炮兵。本题在相邻行间作状态的转移。<code>dp[i][j][p]</code>表示当前为第p行，上一行的状态为i，本行状态为j。dp时我们只需要用到上一行和上上行的状态，而上一行的dp数组就包括了上上行和上一行的状态信息，即只需要用到上一行的dp数组，因此可以用滚动数组。直接上代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>m<span class="token punctuation">)</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span> <span class="token comment">//a记录每行的地形</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//滚动数组</span><span class="token comment">//计算每个状态的炮兵数</span><span class="token keyword">int</span> <span class="token function">getsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>res <span class="token operator">+=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//首先，所有的位运算一定要加括号！因为它的优先级较低</span><span class="token comment">//检查在不考虑纵向的炮兵时，本行的状态是否合法</span><span class="token keyword">bool</span> <span class="token function">chk</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>st<span class="token operator">&amp;</span><span class="token punctuation">(</span>st <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>st<span class="token operator">&amp;</span><span class="token punctuation">(</span>st <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>st<span class="token operator">&amp;</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'H'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将每行地形的字母表示转化为状态表示</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getsum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//初始化dp数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chk</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//滚动数组，状压dp</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//层数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//上一行</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">chk</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//可以视为剪枝或约束，在搞不清哪些约束要加哪些不用加的时候就都加上！</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//本行</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">chk</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//上上一行</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">chk</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span>k<span class="token operator">&amp;</span>j<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>k<span class="token operator">&amp;</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> MS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣5856. 完成任务的最少工作时间段</title>
      <link href="/2021/08/29/li-kou-5856-wan-cheng-ren-wu-de-zui-shao-gong-zuo-shi-jian-duan/"/>
      <url>/2021/08/29/li-kou-5856-wan-cheng-ren-wu-de-zui-shao-gong-zuo-shi-jian-duan/</url>
      
        <content type="html"><![CDATA[<p> 第一次参加力扣周赛，感觉前两道题都是送分题，结果被第三题卡了剩下所有的时间。一开始只想到最简单的贪心，尝试失败后才想起来dfs，还是dfs思路不够清晰。此外在代码细节处理得也不好，根据出错的样例不断调试后，才在比赛结束15分钟提交通过。参考题解后发现经典做法是状态压缩动态规划，经理解后在此将两份代码都记录下来。</p><p>题干如下：</p><hr><h3 id="5856-完成任务的最少工作时间段"><a href="#5856-完成任务的最少工作时间段" class="headerlink" title="5856. 完成任务的最少工作时间段"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks/">5856. 完成任务的最少工作时间段</a></h3><p>Difficulty: <strong>中等</strong></p><p>你被安排了 <code>n</code> 个任务。任务需要花费的时间用长度为 <code>n</code> 的整数数组 <code>tasks</code> 表示，第 <code>i</code> 个任务需要花费 <code>tasks[i]</code> 小时完成。一个 <strong>工作时间段</strong> 中，你可以 <strong>至多</strong> 连续工作 <code>sessionTime</code> 个小时，然后休息一会儿。</p><p>你需要按照如下条件完成给定任务：</p><ul><li>  如果你在某一个时间段开始一个任务，你需要在 <strong>同一个</strong> 时间段完成它。</li><li>  完成一个任务后，你可以 <strong>立马</strong> 开始一个新的任务。</li><li>  你可以按 <strong>任意顺序</strong> 完成任务。</li></ul><p>给你 <code>tasks</code> 和 <code>sessionTime</code> ，请你按照上述要求，返回完成所有任务所需要的 <strong>最少</strong> 数目的 <strong>工作时间段</strong> 。</p><p>测试数据保证 <code>sessionTime</code> <strong>大于等于</strong> <code>tasks[i]</code> 中的 <strong>最大值</strong> 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：tasks = [1,2,3], sessionTime = 3输出：2解释：你可以在两个工作时间段内完成所有任务。- 第一个工作时间段：完成第一和第二个任务，花费 1 + 2 = 3 小时。- 第二个工作时间段：完成第三个任务，花费 3 小时。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：tasks = [3,1,3,1,1], sessionTime = 8输出：2解释：你可以在两个工作时间段内完成所有任务。- 第一个工作时间段：完成除了最后一个任务以外的所有任务，花费 3 + 1 + 3 + 1 = 8 小时。- 第二个工作时间段，完成最后一个任务，花费 1 小时。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：tasks = [1,2,3,4,5], sessionTime = 15输出：1解释：你可以在一个工作时间段以内完成所有任务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>  <code>n == tasks.length</code></li><li>  <code>1 &lt;= n &lt;= 14</code></li><li>  <code>1 &lt;= tasks[i] &lt;= 10</code></li><li>  <code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li></ul><hr><h4 id="dfs-贪心"><a href="#dfs-贪心" class="headerlink" title="dfs+贪心"></a>dfs+贪心</h4><p>Language: ****</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//本题的贪心原则是每次取任务让剩余时间最小</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> remain<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> tasks<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> tp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>remain <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> remain<span class="token punctuation">,</span> nxt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> remain<span class="token punctuation">)</span> <span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> path<span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> remain <span class="token operator">-</span> tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> tasks<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//path</span>t <span class="token operator">=</span> ret<span class="token punctuation">;</span>nxt <span class="token operator">=</span> i<span class="token punctuation">;</span>tp <span class="token operator">=</span> path<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nxt <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>tp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">minSessions</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> tasks<span class="token punctuation">,</span> <span class="token keyword">int</span> sessionTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>len <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tasks<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> cp<span class="token punctuation">;</span><span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sessionTime<span class="token punctuation">,</span> tasks<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt <span class="token operator">+=</span> cp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">:</span> cp<span class="token punctuation">)</span> <span class="token punctuation">{</span>vis<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> tasks <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> sessionTime <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">minSessions</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> sessionTime<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="状压dp"><a href="#状压dp" class="headerlink" title="状压dp"></a>状压dp</h4><p>Language: ****</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//dp[i]表示到达状态i所需的最小时间段数，i为二进制表示的状态集合。</span>    <span class="token keyword">int</span> <span class="token function">minSessions</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> tasks<span class="token punctuation">,</span> <span class="token keyword">int</span> sessionTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> SN<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>SN<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//记录每个状态的总时间</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>SN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>tasks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//该状态的总时间可由其子集转移得到，可以节省一些时间</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>SN<span class="token punctuation">,</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//状压dp数组</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>SN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token punctuation">;</span>j<span class="token operator">=</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//枚举二进制子集，记住！</span>                <span class="token comment">//当子集j中的所有任务可以放在一个时间段内时，就可以通过在状态i^j的基础上加一个时间段而到达状态i</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>sessionTime<span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">^</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>SN<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对顶堆模板</title>
      <link href="/2021/08/28/dui-ding-dui-mo-ban/"/>
      <url>/2021/08/28/dui-ding-dui-mo-ban/</url>
      
        <content type="html"><![CDATA[<p> 对顶堆是由一个大顶堆和一个小顶堆组成的数据结构，可以维护一组元素中的第k大元素或中位数等特定位置的元素。</p><p>以维护中位数为例，假设小顶堆在上，大顶堆在下，形成一个漏斗形结构，如下图。</p><p><img src="F:\blog\source_posts\对顶堆.png" alt="对顶堆"></p><p>其中我们需要保持大顶堆的元素均小于等于小顶堆中的元素，同时大顶堆的元素个数总是比小顶堆多1个，或者与小顶堆相等。设共有2n+1个元素，其中大顶堆有n+1个，小顶堆有n个，且大顶堆的元素都小于等于小顶堆的元素，则大顶堆中最大的元素，即其顶部的元素，就是这2n+1个数的中位数。</p><p>实现时，我们需要轮流向大顶堆和小顶堆中添加元素，以保证这两个堆元素的数量关系。而向大顶堆中添加元素时，为了保持大顶堆中的元素均小于等于小顶堆中的元素，我们需要先将新元素加入小顶堆，再将小顶堆堆顶元素加入大顶堆，可以理解为先加入小顶堆，让它参与竞选，然后从小顶堆中淘汰一个最小的元素加入大顶堆；向小顶堆添加元素同理。</p><p>以<a href="https://www.luogu.com.cn/problem/P1168">P1168 中位数 - 洛谷</a>为例，代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> q0<span class="token punctuation">;</span> <span class="token comment">//小顶堆，在上</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q1<span class="token punctuation">;</span><span class="token comment">//大顶堆，在下，元素比q0多1个或同样多</span><span class="token comment">//向对顶堆中添加元素</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//放大顶堆q1，竞选与淘汰</span>q0<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> q0<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q0<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//放小顶堆q0，竞选与淘汰</span>q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q0<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> q1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求第k大元素时同理，只需保持小顶堆的元素为k个，先向小顶堆中添加元素，达到k个后改为以竞选和淘汰的方式向大顶堆中添加元素，则小顶堆的堆顶就是第k大的元素。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P3958 [NOIP2017 提高组] 奶酪</title>
      <link href="/2021/08/28/luo-gu-p3958-noip2017-ti-gao-zu-nai-luo/"/>
      <url>/2021/08/28/luo-gu-p3958-noip2017-ti-gao-zu-nai-luo/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P3958">P3958 NOIP2017 提高组 奶酪 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。本题是一道思路比较简单的并查集题，我想记录这道题并不是因为它很难，而是因为有很多代码细节需要注意，我在做的时候也踩了很多坑，写下来也是提醒自己。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> ll T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> h<span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">point</span> <span class="token punctuation">{</span>ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span><span class="token keyword">bool</span> top<span class="token punctuation">,</span> bot<span class="token punctuation">;</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bot</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">point</span><span class="token punctuation">(</span>ll xx<span class="token punctuation">,</span> ll yy<span class="token punctuation">,</span> ll zz<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">z</span><span class="token punctuation">(</span>zz<span class="token punctuation">)</span> <span class="token punctuation">{</span>top <span class="token operator">=</span> bot <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> bot <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> z <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> top <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//计算点的距离时不要开方，直接用long long存其平方的结果，因为开方会导致精度损失，会不能通过最后两个点</span>ll <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">const</span> point <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>z <span class="token operator">-</span> b<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>z <span class="token operator">-</span> b<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>p<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> fax <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> fay <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fax <span class="token operator">==</span> fay<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>fax<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">||</span> p<span class="token punctuation">[</span>fay<span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>fax<span class="token punctuation">]</span><span class="token punctuation">.</span>bot<span class="token operator">||</span>p<span class="token punctuation">[</span>fay<span class="token punctuation">]</span><span class="token punctuation">.</span>bot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>fay<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">|=</span> p<span class="token punctuation">[</span>fax<span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>p<span class="token punctuation">[</span>fay<span class="token punctuation">]</span><span class="token punctuation">.</span>bot <span class="token operator">|=</span> p<span class="token punctuation">[</span>fax<span class="token punctuation">]</span><span class="token punctuation">.</span>bot<span class="token punctuation">;</span>fa<span class="token punctuation">[</span>fax<span class="token punctuation">]</span> <span class="token operator">=</span> fay<span class="token punctuation">;</span> <span class="token comment">//这句要放在最后，否则前面的操作中fay就是fax</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//所有input一定要放在最前面</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> h <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ll x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bot<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//最开始漏考虑了一个球洞就使上下连通的情况</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//这里不能直接break，否则后面的输入就没有读入！</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">dist</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Union</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kruskal算法模板</title>
      <link href="/2021/08/27/kruskal-suan-fa-mo-ban/"/>
      <url>/2021/08/27/kruskal-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<p> 本代码原题为<a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树 - 洛谷</a>，根据<a href="https://www.luogu.com.cn/user/57014"><strong>Nemlit</strong></a>的题解学习并自己写出。由于该算法是逐边遍历，因此在稀疏图上表现比Prim算法好。为了防止成环，需要用到并查集。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>edge a<span class="token punctuation">,</span> edge b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>w <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">sort</span><span class="token punctuation">(</span>e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将边按权值从小到大排序</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> fax <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> fay <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fax <span class="token operator">==</span> fay<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>res <span class="token operator">+=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>fa<span class="token punctuation">[</span>fax<span class="token punctuation">]</span> <span class="token operator">=</span> fay<span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//加入n-1条边即完成</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"orz"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//图不连通就输出orz</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Prim算法模板</title>
      <link href="/2021/08/27/prim-suan-fa-mo-ban/"/>
      <url>/2021/08/27/prim-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<p> 本代码的原题为<a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树 - 洛谷</a>，根据<a href="https://www.luogu.com.cn/user/57014"><strong>Nemlit</strong></a>的题解学习了最小生成树的Prim算法。Prim算法在稠密图上表现比Kruskal好，在稀疏图上不如Kruskal。其思想是维护一个已经选取了的点的集合，每次将连接已选取的和未选取的点的边中权值最小的一条选中，并将这个未选取的点放进已选取的点集中。这个算法的思想和代码实现和Dijkstra算法都有着异曲同工之处，因此在理解Prim算法的具体过程后，该代码并不难理解。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">toEdge</span> <span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>toEdge<span class="token operator">&gt;</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里选取1号节点为初始节点</span><span class="token keyword">void</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//更新与1节点相邻的结点的dis</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>toEdge e <span class="token operator">=</span> adj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>dis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>tot <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//每次循环生成一条边，共进行n-1轮</span><span class="token keyword">int</span> mindis <span class="token operator">=</span> INF<span class="token punctuation">,</span>idx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> mindis <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> mindis <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>idx <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment">//如果图不连通则输出orz</span><span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"orz"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>res <span class="token operator">+=</span> dis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>toEdge ne <span class="token operator">=</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>ne<span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>ne<span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ne<span class="token punctuation">.</span>w<span class="token punctuation">)</span>dis<span class="token punctuation">[</span>ne<span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> ne<span class="token punctuation">.</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> z<span class="token punctuation">;</span>adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>y<span class="token punctuation">,</span>z<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adj<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span>z <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2195 HXY造公园</title>
      <link href="/2021/08/27/luo-gu-p2195-hxy-zao-gong-yuan/"/>
      <url>/2021/08/27/luo-gu-p2195-hxy-zao-gong-yuan/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P2195">P2195 HXY造公园 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。这是令我饱受折磨的一道题，做完洛谷P5536 【XR-3】核心城市后做这道题，原本以为基本按照原思路写就行，结果只过了一个点。参考<a href="https://www.luogu.com.cn/user/270"><strong>违规用户名H9z3*Ge</strong></a>的题解后，理清了整体思路，就是用并查集表示连通分量，连通分量的树根结点记录这个连通分量的直径（记录在dis数组中，用两遍dfs或bfs求都可以），然后每次查询只在dis数组上操作即可。由于边权都是1，也就是新加的边引入的额外距离都相等，所以每次连接两个新节点时，只需选取相应连通分量中与其他结点的最远距离最近的点，也就是直径的中点。</p><p>然而用dfs写了代码后仍然爆TLE和WA，改为bfs后也有TLE，题解中的bfs又难以理解，因此我又参考了<a href="https://www.luogu.com.cn/user/70178"><strong>noall</strong></a>的题解，才写出了正确而高效的代码，可见自己的实现能力和代码细节都还有待提升！！</p><p>下面是我的最终代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">300005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> maxd<span class="token punctuation">,</span>ep<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">:</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&gt;</span> maxd<span class="token punctuation">)</span> <span class="token punctuation">{</span>maxd <span class="token operator">=</span> depth<span class="token punctuation">;</span>ep <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> nxt <span class="token operator">=</span> adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//如果用memset清空vis会TLE</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getdis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//只对每个连通分量的根结点求dis，O(n)</span>maxd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>adj<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>adj<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fax <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> fay <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fax <span class="token operator">!=</span> fay<span class="token punctuation">)</span>fa<span class="token punctuation">[</span>fax<span class="token punctuation">]</span> <span class="token operator">=</span> fay<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getdis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> query<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> query<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> fax <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> fay <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fax <span class="token operator">==</span> fay<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> d1 <span class="token operator">=</span> dis<span class="token punctuation">[</span>fax<span class="token punctuation">]</span><span class="token punctuation">,</span> d2 <span class="token operator">=</span> dis<span class="token punctuation">[</span>fay<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> newd <span class="token operator">=</span> <span class="token punctuation">(</span>d1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>d2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>fa<span class="token punctuation">[</span>fax<span class="token punctuation">]</span> <span class="token operator">=</span> fay<span class="token punctuation">;</span>dis<span class="token punctuation">[</span>fay<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>fax<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>fay<span class="token punctuation">]</span><span class="token punctuation">,</span> newd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树的直径 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P5536 【XR-3】核心城市</title>
      <link href="/2021/08/26/luo-gu-p5536-xr-3-he-xin-cheng-shi/"/>
      <url>/2021/08/26/luo-gu-p5536-xr-3-he-xin-cheng-shi/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P5536">P5536 【XR-3】核心城市 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，树的直径模板题，参考<a href="https://www.luogu.com.cn/user/103023"><strong>e_e_thinker</strong></a>的题解。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> depth<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> maxd<span class="token punctuation">,</span> ep<span class="token punctuation">;</span><span class="token comment">//maxd最大深度，ep:endpoint，直径端点</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> mdepth<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f父节点，mdepth该子树的最大深度</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//距离任意一个节点最远的节点一定是树的直径的端点，据此可用两次dfs找树的直径</span><span class="token comment">//该dfs函数可标记每个结点的深度、父节点，并找出最大深度和对应的直径端点</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;</span> maxd<span class="token punctuation">)</span> <span class="token punctuation">{</span>maxd <span class="token operator">=</span> d<span class="token punctuation">;</span>ep <span class="token operator">=</span> idx<span class="token punctuation">;</span><span class="token punctuation">}</span>depth<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>f<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> nxt <span class="token operator">=</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>depth<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//与dfs函数的区别是，该函数求出了mdepth</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>mdepth<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>depth<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> nxt <span class="token operator">=</span> adj<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nxt <span class="token operator">==</span> fa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">dfs2</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mdepth<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mdepth<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> mdepth<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//两次dfs求直径</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//找到直径中点</span>mid <span class="token operator">=</span> ep<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxd <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> mid <span class="token operator">=</span> f<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//以中点为根结点建树，求各点depth和mdepth</span><span class="token function">dfs2</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mdepth<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> depth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//ans[i]表示节点i能扩展的最大深度，按从大到小顺序加入核心城市</span><span class="token function">sort</span><span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树的直径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1266 速度限制</title>
      <link href="/2021/08/26/luo-gu-p1266-su-du-xian-zhi/"/>
      <url>/2021/08/26/luo-gu-p1266-su-du-xian-zhi/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1266">P1266 速度限制 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>。本题为使用分层图的Dijkstra算法，代码参考<a href="https://www.luogu.com.cn/user/121102"><strong>啧啧啧</strong></a>。</p><p>本题在路程（题中为时间）的基础上还需要考虑上一阶段的速度，同样的结点，如果速度不同，也属于不同的状态，因此在传统Dijkstra算法的基础上，在<code>dis[maxn],vis[maxn]</code>的基础上增加一个速度维度，成为<code>dis[maxn][maxv],vis[maxn][maxv]</code>，相应的堆也要额外记录当前状态的速度，即所有与状态有关的量都增加一个速度维度。</p><p>此外，本题最终需要输出整条路径，故增加from数组用来回溯路径。</p><p>具体代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;climits&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> PAIR<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">155</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token number">505</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> INF <span class="token operator">=</span> <span class="token number">1e20</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">toEdge</span> <span class="token punctuation">{</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token keyword">double</span> l<span class="token punctuation">;</span><span class="token function">toEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> yy<span class="token punctuation">,</span> <span class="token keyword">int</span> vv<span class="token punctuation">,</span> <span class="token keyword">double</span> ll<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">y</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">v</span><span class="token punctuation">(</span>vv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">l</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>toEdge<span class="token operator">&gt;</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>node from<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxv<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//from数组包含两个维度，其元素也必须有这两个维度才能回溯</span><span class="token keyword">double</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxv<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//分层图的dis和vis</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxv<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//根据from回溯打印路径</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>v<span class="token operator">!=</span><span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>node nxt <span class="token operator">=</span> from<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>d <span class="token operator">=</span> nxt<span class="token punctuation">.</span>x<span class="token punctuation">;</span>v <span class="token operator">=</span> nxt<span class="token punctuation">.</span>v<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dij</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>priority_queue<span class="token operator">&lt;</span>PAIR<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>PAIR cp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> cx <span class="token operator">=</span> cp<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">,</span> cv <span class="token operator">=</span> cp<span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>cv<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>cv<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>toEdge edge <span class="token operator">=</span> adj<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> edge<span class="token punctuation">.</span>y<span class="token punctuation">,</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">double</span> l <span class="token operator">=</span> edge<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>v <span class="token operator">=</span> cv<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">/</span> v <span class="token operator">+</span> dis<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>cv<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> l <span class="token operator">/</span> v <span class="token operator">+</span> dis<span class="token punctuation">[</span>cx<span class="token punctuation">]</span><span class="token punctuation">[</span>cv<span class="token punctuation">]</span><span class="token punctuation">;</span>from<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> cx<span class="token punctuation">,</span>cv <span class="token punctuation">}</span><span class="token punctuation">;</span>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>y<span class="token punctuation">,</span>v<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//找到能到达终点的所有状态中路程（时间）最小的状态，其对应的速度</span><span class="token keyword">int</span> flagv <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">double</span> mint <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mint<span class="token punctuation">)</span> <span class="token punctuation">{</span>flagv <span class="token operator">=</span> v<span class="token punctuation">;</span>mint <span class="token operator">=</span> dis<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>flagv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> d<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> v<span class="token punctuation">,</span> l<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> v <span class="token operator">&gt;&gt;</span> l<span class="token punctuation">;</span>adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span>v<span class="token punctuation">,</span>l <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">dij</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 最短路问题 </tag>
            
            <tag> Dijkstra算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 分层图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1462 通往奥格瑞玛的道路</title>
      <link href="/2021/08/25/luo-gu-p1462-tong-wang-ao-ge-rui-ma-de-dao-lu/"/>
      <url>/2021/08/25/luo-gu-p1462-tong-wang-ao-ge-rui-ma-de-dao-lu/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1462">P1462 通往奥格瑞玛的道路 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，该题为Dijkstra+二分查找的典型题，对最大路费进行二分查找，通过设置vis数组的方式屏蔽路费大于当前二分值的节点。代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;climits&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PAIR<span class="token punctuation">;</span>ll n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> b<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>ll dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">toEdge</span> <span class="token punctuation">{</span>ll v<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>toEdge<span class="token operator">&gt;</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>PAIR<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PAIR<span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lim <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//需要额外对f[n]作判断，因为即使vis[n]被设置为了true，它的距离仍会被其他通向它的路更新。因为在更新距离时，并没有对被更新点的vis作检查。好像可以把vis的检查和设置放在更新距离时，就可以去掉此句，且运行速度更快。</span><span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//通过设置vis[i]=true来屏蔽相应的点；</span><span class="token comment">//只能防止它通向其他路，不能防止其他路通向它，所以上面要单独判断f[n]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> lim<span class="token punctuation">)</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>PAIR cp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ll u <span class="token operator">=</span> cp<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>toEdge edge<span class="token operator">=</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>ll v <span class="token operator">=</span> edge<span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span>w<span class="token punctuation">;</span>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>v <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//自环只是白白增加路程，没有意义</span>adj<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> b<span class="token punctuation">,</span>c <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adj<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span>c <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对所有可能的路费c作二分会节约时间</span><span class="token function">sort</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dijkstra</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"AFK"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>ll mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dijkstra</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 最短路问题 </tag>
            
            <tag> Dijkstra算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd算法模板</title>
      <link href="/2021/08/25/floyd-suan-fa-mo-ban/"/>
      <url>/2021/08/25/floyd-suan-fa-mo-ban/</url>
      
        <content type="html"><![CDATA[<p> 本代码的原题为<a href="https://www.luogu.com.cn/problem/P3371">P3371 【模板】单源最短路径（弱化版） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考了<a href="https://www.luogu.com.cn/user/57014"><strong>Nemlit</strong></a>的题解。Floyd算法可以正确处理有向图和带负边权的图，但不能处理有负权回路的图。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;climits&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token comment">//当不使用全局变量a时，其所占用的空间较小；</span><span class="token comment">//如果使用memset将a整个初始化，就会导致MLE；</span><span class="token comment">//因此只将需要使用的部分（1~n）初始化可以减小空间使用</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化完成</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">;</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重边时取最小值</span><span class="token punctuation">}</span><span class="token comment">//floyd</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> k <span class="token operator">||</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token comment">//剪枝</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1352 没有上司的舞会</title>
      <link href="/2021/08/25/luo-gu-p1352-mei-you-shang-si-de-wu-hui/"/>
      <url>/2021/08/25/luo-gu-p1352-mei-you-shang-si-de-wu-hui/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1352">P1352 没有上司的舞会 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，本题为树形dp的模板题，类似力扣中的打家劫舍问题。参考了<a href="https://www.luogu.com.cn/user/27114"><strong>BlueArc</strong></a>的题解。</p><p>树形dp即数据的逻辑结构为树形，一般用<strong>递归</strong>函数解题，先递归处理孩子结点，然后根据孩子结点的结果处理父节点。本题中dp数组仍可定义为线性，只要将数据在逻辑上整理成树形结构即可，本代码的做法是用vector数组存每个结点的所有孩子结点。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//树形dp</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">6005</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> son<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> notRoot<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> idx <span class="token operator">=</span> son<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">solve</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先递归处理孩子结点</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//再处理父结点</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token comment">//建树</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>son<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>notRoot<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//用于找根结点的下标</span><span class="token punctuation">}</span><span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>notRoot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>root <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">solve</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1880 [NOI1995] 石子合并</title>
      <link href="/2021/08/24/luo-gu-p1880-noi1995-shi-zi-he-bing/"/>
      <url>/2021/08/24/luo-gu-p1880-noi1995-shi-zi-he-bing/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1880">P1880 NOI1995 石子合并 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，本题考点为环形区间dp，参考<a href="https://www.luogu.com.cn/user/49368"><strong>Corrine</strong></a>的题解。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">,</span>psum<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp1<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> res1<span class="token punctuation">,</span> res2<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">//由于为环形，因此开2n大小的数组，保证考虑到所有的情况</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>psum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> psum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//p确定当前区间大小，从小到大变化</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> i <span class="token operator">+</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">+</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//i和j为当前的区间边界</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//k为[i,j]区间的合并点，遍历所有可能的k</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp1<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>psum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> psum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp2<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>psum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> psum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span> dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res2 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res2<span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res2 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> res1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P5020 [NOIP2018 提高组] 货币系统</title>
      <link href="/2021/08/24/luo-gu-p5020-noip2018-ti-gao-zu-huo-bi-xi-tong/"/>
      <url>/2021/08/24/luo-gu-p5020-noip2018-ti-gao-zu-huo-bi-xi-tong/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P5020">P5020 NOIP2018 提高组 货币系统 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，参考<a href="https://www.luogu.com.cn/user/12842"><strong>0x3喵酱</strong></a>的代码。</p><p>等价的最小货币系统就是将原货币系统中，所有可被其他面额表示的面额去掉后的状态，因此该问题可归结为完全背包问题，即将每个面额都视为背包，探究其是否可被比它更小的面额装满。具体实现参考代码注释：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">25005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> n<span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//完全背包模板的改编</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果该面额已经被比它更小的面额表示出，则更新res并忽略它。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//否则该面额就属于新货币系统，用该面额填充后面的面额（背包）。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1757 通天之分组背包</title>
      <link href="/2021/08/24/luo-gu-p1757-tong-tian-zhi-fen-zu-bei-bao/"/>
      <url>/2021/08/24/luo-gu-p1757-tong-tian-zhi-fen-zu-bei-bao/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P1757">P1757 通天之分组背包 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，题目主要考察分组背包，参考<a href="https://www.luogu.com.cn/user/65735"><strong>yuzhechuan</strong></a>的题解。</p><p>分组背包的一维dp的模板为</p><pre class="line-numbers language-none"><code class="language-none">for 所有的组k    for v=V..0 //背包容量        for 所有的i属于组k　　　　　　f[v]=max{f[v],f[v-w[i]]+c[i]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于需要逐组遍历物品，为了让时间复杂度与组数无关，需要在读入时用数组<code>idx</code>分别记录每一组各物品的下标。代码如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1005</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> cmax<span class="token punctuation">;</span> <span class="token comment">//最大组号</span><span class="token keyword">int</span> group_cnt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//每组的元素个数</span><span class="token keyword">int</span> idx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//idx[i][j]为第i组第k个物品的下标</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>cmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> cmax<span class="token punctuation">)</span><span class="token punctuation">;</span>idx<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>group_cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>group_cnt<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cmax<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> group_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//如果当前容量能放下当前物品</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> a<span class="token punctuation">[</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>idx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2679 [NOIP2015 提高组] 子串</title>
      <link href="/2021/08/24/luo-gu-p2679-noip2015-ti-gao-zu-zi-chuan/"/>
      <url>/2021/08/24/luo-gu-p2679-noip2015-ti-gao-zu-zi-chuan/</url>
      
        <content type="html"><![CDATA[<p> 原题为<a href="https://www.luogu.com.cn/problem/P2679">P2679 NOIP2015 提高组 子串 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>，这道题的状态转移想起来很绕，所以记录一下自己对它的理解，参考了<a href="https://www.luogu.com.cn/user/23398"><strong>frankchenfu</strong></a>的题解。</p><p>首先，每个状态需要记录的信息包括A串匹配到的位置i，B串匹配到的位置j，当前所用的子串数p和是否使用了A[i]。即定义dp数组为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当<code>A[i]==B[j]</code>时,</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>f[i][j][p][0]</code>，即不使用<code>A[i]</code>时，<code>A[i]</code>位置无法创造出一个新的子串，直接照搬使用和不使用<code>A[i-1]</code>的两种状态即可，它们都已经匹配到了<code>B[j]</code>，且用了<code>p</code>个子串；</p><p><code>f[i][j][p][1]</code>，即使用<code>A[i]</code>时，如果使用了<code>A[i-1]</code>，则<code>A[i-1]</code>和<code>B[j-1]</code>必定相同，则可以将<code>A[i-1]</code>对应的子串延长到<code>A[i]</code>，状态对应<code>f[i-1][j-1][p][1]</code>，也可以让<code>A[i]</code>和<code>B[j]</code>形成一个长度为1的新子串，状态对应<code>f[i-1][j-1][p-1][1]</code>；如果没有使用<code>A[i-1]</code>，则一定产生了长度为1的新子串，状态对应<code>f[i-1][j-1][p-1][0]</code>。</p><p>当<code>A[i]!=B[j]</code>时，</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//与A[i]==B[j]时相同</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//A[i]和B[j]不匹配，所以一定不能用A[i]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>观察可知状态转移时，第一维都只用到了i-1，所以可以用滚动数组节省空间。综上，代码为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//初始化，第一维取值i任意，后三位表示初始时，没有匹配过B串，使用0个子串，未使用A[i]的情况是可行的。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span><span class="token comment">//共用的情况提到if外面</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>\f<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token operator">+</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span><span class="token comment">//必须每加一次都MOD一次</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研的迷茫</title>
      <link href="/2021/08/20/bao-yan-de-mi-mang/"/>
      <url>/2021/08/20/bao-yan-de-mi-mang/</url>
      
        <content type="html"><![CDATA[<p>今天是2021年8月20日，距离预推免的日子也越来越近，我的心情也随之变得愈发焦虑。我现在拥有的offer只有清华软院一个，这也是我参加的第一个夏令营收获的。当时出于对建筑相关方向的兴趣，在和姜老师的交流中获得了他的推荐，也最终顺利获得了现在老板的口头offer。当时在我的心中，清华是遥不可及的梦想，获得offer以后更觉恍然如梦，激动得久久难眠。为了稳住offer，也是去往组中实习了一个月。但现在冷静下来，我又逐渐开始为自己的前途所担忧。</p><p>最初我认为BIM是一个有趣的方向，随觉得和自己之前的未来规划有些不同，但也还充满信心。但经过在组中实习后，我发觉这个组与我所想的有很大的不同。BIM组是一个主攻工程的组，科研很是薄弱，老师也不能提供足够的指导，这对于没有什么科研基础的我来说是很致命的，我很担心自己不能在5年中摸索出自己科研的道路，让宝贵的青春白白逝去。我的观念中，博士就是要潜心科研，做项目的性价比远不如去企业摸爬来的合算，组中同学们的看法也进一步加深了我的恐惧，令我感到无所适从。看着身边的同学进入其他学校的科研强组，我心有不甘，但出于老师这段时间的招待，很不忍心拒绝老师的offer，令觅他处。每当我觉得自己应该做些什么而不敢去做时，就会为自己纠结而无能的做法感到又怒又悲。</p><p>这几天还是先潜下心来认真刷刷题，复习一下吧，至少我不会再在纠结中荒度时光，学会了在痛苦的时光中认真生活，多读书充实自己。相信只要努力，一切烦心事最终都会有好的结果吧。</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
